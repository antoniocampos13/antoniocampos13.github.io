<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Antonio's Portfolio - R</title><link href="https://antoniocampos13.github.io/" rel="alternate"></link><link href="https://antoniocampos13.github.io/feeds/r.atom.xml" rel="self"></link><id>https://antoniocampos13.github.io/</id><updated>2023-04-29T10:00:00-03:00</updated><subtitle>PhD in Genetics</subtitle><entry><title>Genomic plots with circlize</title><link href="https://antoniocampos13.github.io/genomic-plots-with-circlize.html" rel="alternate"></link><published>2023-04-29T10:00:00-03:00</published><updated>2023-04-29T10:00:00-03:00</updated><author><name>Antonio Victor Campos Coelho</name></author><id>tag:antoniocampos13.github.io,2023-04-29:/genomic-plots-with-circlize.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Genomics is undoubtedly a complex science. The human genome is huge, with more than 3 billion base pairs, about 20,000 protein-coding genes, several millions of variants, and many more interesting characteristics. The visualization of genomic/omics data is challenging due to the sheer volume of information. Circular plots …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Genomics is undoubtedly a complex science. The human genome is huge, with more than 3 billion base pairs, about 20,000 protein-coding genes, several millions of variants, and many more interesting characteristics. The visualization of genomic/omics data is challenging due to the sheer volume of information. Circular plots are a popular way to extract information at a glance from omics-level&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;In this post, I will demonstrate the &lt;a href="https://jokergoo.github.io/circlize_book/book/"&gt;&lt;code&gt;circlize&lt;/code&gt; package&lt;/a&gt; from R software, a versatile tool with applications in&amp;nbsp;Genomics.&lt;/p&gt;
&lt;p&gt;As always, I will post the code of this demo in my &lt;a href="https://github.com/antoniocampos13/portfolio/tree/master/R/2023_04_21_Genomic_plots_with_circlize"&gt;portfolio&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Necessary&amp;nbsp;packages&lt;/h2&gt;
&lt;p&gt;I will use the following R&amp;nbsp;packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tidyverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circlize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install any of them with the function &lt;code&gt;install.packages()&lt;/code&gt;, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tidyverse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;= 1.5.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# we need this version or later&lt;/span&gt;
&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;glue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;circlize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Preparing the&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;In this demo, I will create a simple circular plot showing the mean number of pathogenic variants per 100,000 base pairs windows (intervals) in the human genome, as well as showing regions involved with segmental&amp;nbsp;duplication.&lt;/p&gt;
&lt;p&gt;Thus, I create a variable named &lt;code&gt;intervalWidth&lt;/code&gt; representing the 100,000 bp intervals to use later in the&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Magic numbers ----&lt;/span&gt;
&lt;span class="n"&gt;intervalWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1e5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a fancy way to write the number 100,000. Then, I create two variables to hold the web links containing the data. The first one is the ClinVar variant summary. I will extract the pathogenic variants&amp;#8217; coordinates from it and calculate the mean number of them in each interval of the human&amp;nbsp;genome.&lt;/p&gt;
&lt;p&gt;The second one is a dataset from &lt;span class="caps"&gt;UCSC&lt;/span&gt; storing the coordinates of segmental duplication regions in the human&amp;nbsp;genome.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Dataset links ----&lt;/span&gt;
&lt;span class="n"&gt;variantSummaryPath&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://ftp.ncbi.nlm.nih.gov/pub/clinvar/tab_delimited/variant_summary.txt.gz&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;genomicSuperDupsPath&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/genomicSuperDups.txt.gz&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Preparing the ClinVar&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s import the ClinVar dataset and keep only germline, pathogenic, single nucleotide variants mapped in the GRCh38 assembly, excluding those in the mitochondrial&amp;nbsp;chromosome:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;variantSummary&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OriginSimple&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;germline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GRCh38&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClinicalSignificance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Pathogenic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;single nucleotide variant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Chromosome&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="c1"&gt;# continues in the next codeblock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I create new columns to help me link with the segmental duplication dataset. I create a new column named &lt;code&gt;chr&lt;/code&gt; appending the string &amp;#8220;chr&amp;#8221; to each chromosome name, and another column, &lt;code&gt;posInterval&lt;/code&gt; to put each variant inside a 100,000 base pair window as I explained earlier. To this end, I group the data by chromosome, so each chromosome has their&amp;nbsp;windows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;glue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chr{Chromosome}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;cut_width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intervalWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;ungroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="c1"&gt;# continues in the next codeblock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I count how many variants there are per&amp;nbsp;interval:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;posInterval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;summarise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nVariants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;ungroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="c1"&gt;# continues in the next codeblock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I create one more column (&lt;code&gt;newStart&lt;/code&gt;) to mark the starting coordinate of each interval, to help me plot in the circular layout&amp;nbsp;later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nf"&gt;rowwise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;as.integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;str_split_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posInterval&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\[|\\(&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;ungroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This last step involves a bit of string manipulation. The &lt;code&gt;posInterval&lt;/code&gt; is created with &lt;code&gt;factor&lt;/code&gt; type. I must convert it to &lt;code&gt;character&lt;/code&gt; (string) so I can extract the first coordinate of the interval by splitting it at the comma delimiter with the help of the &lt;code&gt;str_split_1()&lt;/code&gt; function. Then, I remove &lt;code&gt;[&lt;/code&gt; or &lt;code&gt;(&lt;/code&gt; characters from the string with the &lt;code&gt;str_remove()&lt;/code&gt; function. Finally, I convert the string into &lt;code&gt;integer&lt;/code&gt; type with the &lt;code&gt;as.integer()&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;Preparing the segmental duplication&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;I import the segmental duplication dataset into the object &lt;code&gt;genomicSuperDups&lt;/code&gt; and explicitly name the columns with the &lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables?db=hg38&amp;amp;hgta_group=rep&amp;amp;hgta_track=genomicSuperDups&amp;amp;hgta_table=genomicSuperDups&amp;amp;hgta_doSchema=describe+table+schema"&gt;original names from &lt;span class="caps"&gt;UCSC&lt;/span&gt;&lt;/a&gt; since the &lt;span class="caps"&gt;BED&lt;/span&gt; format does not have header&amp;nbsp;names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import segmental duplication dataset ----&lt;/span&gt;
&lt;span class="n"&gt;genomicSuperDups&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;read_tsv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;genomicSuperDupsPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;col_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;chrom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;chromStart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;chromEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;strand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;otherChr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;otherStart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;otherEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;otherSize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;uid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;posBasesHit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;testResult&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;verdict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;chits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;ccov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;alignfile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;alignL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;indelN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;indelS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;alignB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;matchB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;mismatchB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;transitionsB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;transversionsB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fracMatch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fracMatchIndel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;jcK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;k2K&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, some filtering. I remove any duplication involving alternative/decoys&amp;nbsp;chromosomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## Extract coordinates ----&lt;/span&gt;
&lt;span class="n"&gt;genomicSuperDupsFiltered&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;genomicSuperDups&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;str_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chrom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;random|chrUn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;str_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otherChr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;random|chrUn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I create two data frames representing the pairs of coordinates (origin/target) involved in the&amp;nbsp;duplications:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;bed1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;genomicSuperDups&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chrom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chromStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chromEnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;setNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;bed2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;genomicSuperDups&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otherChr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherEnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;setNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I rename the column names so &lt;code&gt;circlize&lt;/code&gt; can recognize them&amp;nbsp;later.&lt;/p&gt;
&lt;h2&gt;Preparing color helper&amp;nbsp;function&lt;/h2&gt;
&lt;p&gt;I will now create a helper function to color the plot according to the number of pathogenic variants in each interval. Thus, each interval will be colored according to the mean number of pathogenic variants in the whole genome. The mean number will be colored white, and regions with fewer variants than the mean will be colored with shades of blue, whereas regions with more variants will be colored with shades of&amp;nbsp;red.&lt;/p&gt;
&lt;p&gt;To this end, I will scale the limits of the number of variants with their&amp;nbsp;logarithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create color function ----&lt;/span&gt;
&lt;span class="n"&gt;minVariants&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nVariants&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;meanVariants&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nVariants&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;maxVariants&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ceiling&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nVariants&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;colorFunction&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;
  &lt;span class="nf"&gt;colorRamp2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minVariants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meanVariants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxVariants&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Making the &lt;code&gt;circlize&lt;/code&gt; plot&lt;/h2&gt;
&lt;p&gt;Everything is ready for making the &lt;code&gt;circlize&lt;/code&gt; plot. I will save the output to disk in a &lt;span class="caps"&gt;TIFF&lt;/span&gt; format with the specified dimensions in centimeters and with a resolution of 300&amp;nbsp;dpi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;tiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;circlize_demo.tiff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;17.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;23.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;pointsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lzw&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After declaring the output format, I can run the commands that will construct the circular&amp;nbsp;plot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;circos.par&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start.degree&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first command is purely cosmetic: it tells &lt;code&gt;circlize&lt;/code&gt; to rotate the layout 90 degrees, so chromosome 1 will appear approximately at the top of the plot, with the remaining chromosomes following in a clockwise&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;The next command creates the first track of the plot, with ideograms representing the cytobands of each chromosome. Observe the &lt;code&gt;species&lt;/code&gt; argument value - the &lt;code&gt;circlize&lt;/code&gt; default is the GRCh37 assembly, therefore we must configure it to use the&amp;nbsp;GRCh38:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;circos.initializeWithIdeogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hg38&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The third command creates the second track of the plot. This track will be a simple color plot. The &lt;code&gt;ylim&lt;/code&gt; represents a Y-axis with limits going from 0 to 100. The X-axis will correspond to chromosome coordinates. Each chromosome is a sector in this&amp;nbsp;track.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;circos.track&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I draw the plot with colored lines. Each line will represent one 100,00 bp interval and the color represent the density of pathogenic variants within the interval. Regions with fewer variants than the mean will have blue shades, whereas variant-rich regions will have red&amp;nbsp;shades.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;circos.trackLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;newStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;colorFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathogenicSNVs&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;nVariants&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first argument represents the chromosomes (sectors), &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; the line coordinates. Since I wanted each line spanning the complete Y-axis length, I simply repeat the number 100 &lt;em&gt;N&lt;/em&gt; times (with the function &lt;code&gt;rep()&lt;/code&gt;), in which &lt;em&gt;N&lt;/em&gt; represents the number of rows in the &lt;code&gt;pathogenicSNVs&lt;/code&gt; dataset, obtained by using the &lt;code&gt;nrow()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Finally, I invoke the final command for the plot: it will create links in the center of the plot, connecting the regions involved with segmental&amp;nbsp;duplications:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;circos.genomicLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bed1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bed2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;coral&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As soon as I execute the command above, I execute the following two commands so that R can save the &lt;span class="caps"&gt;TIFF&lt;/span&gt; image to disk and reset &lt;code&gt;circlize&lt;/code&gt;, readying it for generating other&amp;nbsp;plots.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;dev.off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;circos.clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The plotting process may take a while since we are dealing with quite a number of datapoints. This is the&amp;nbsp;result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="circlize plot: pathogenic variants and segmental duplications" src="https://antoniocampos13.github.io/images/circlize_demo.png"&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I demonstrated the &lt;code&gt;circlize&lt;/code&gt; package for producing interesting circular plots, which are specially used for visualizing complex genomic&amp;nbsp;information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Subscribe to my &lt;a href="https://antoniocampos13.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;, &lt;a href="https://antoniocampos13.github.io/feeds/all.atom.xml"&gt;Atom feed&lt;/a&gt; or &lt;a href="https://t.me/joinchat/AAAAAEYrNCLK80Fh1w8nAg"&gt;Telegram channel&lt;/a&gt; to keep you updated whenever I post new&amp;nbsp;content.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jokergoo.github.io/circlize_book/book/"&gt;Circular Visualization in&amp;nbsp;R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables?db=hg38&amp;amp;hgta_group=rep&amp;amp;hgta_track=genomicSuperDups&amp;amp;hgta_table=genomicSuperDups&amp;amp;hgta_doSchema=describe+table+schema"&gt;&lt;span class="caps"&gt;UCSC&lt;/span&gt; Genome Browser | Schema for Segmental&amp;nbsp;Dups&lt;/a&gt;&lt;/p&gt;</content><category term="R"></category><category term="circlize"></category><category term="genomics"></category><category term="data visualization"></category></entry><entry><title>Integrating R and Python with reticulate</title><link href="https://antoniocampos13.github.io/integrating-r-and-python-with-reticulate.html" rel="alternate"></link><published>2022-03-20T16:40:00-03:00</published><updated>2022-03-20T16:40:00-03:00</updated><author><name>Antonio Victor Campos Coelho</name></author><id>tag:antoniocampos13.github.io,2022-03-20:/integrating-r-and-python-with-reticulate.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://rstudio.github.io/reticulate/"&gt;reticulate&lt;/a&gt; is an R package that allows interoperability between R and Python. I recently discovered this package, and I have been excited to efficiently run Python scripts inside an R session, bringing the best of both&amp;nbsp;worlds.&lt;/p&gt;
&lt;p&gt;In this post, I will demonstrate &lt;code&gt;reticulate&lt;/code&gt; with two scripts. First, I …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://rstudio.github.io/reticulate/"&gt;reticulate&lt;/a&gt; is an R package that allows interoperability between R and Python. I recently discovered this package, and I have been excited to efficiently run Python scripts inside an R session, bringing the best of both&amp;nbsp;worlds.&lt;/p&gt;
&lt;p&gt;In this post, I will demonstrate &lt;code&gt;reticulate&lt;/code&gt; with two scripts. First, I will start an R session with an R script. Then I will call a Python script inside the R session and manipulate the Python&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;The demonstration output will be a data frame containing exon coordinates of two genes and the nucleotide sequences of those&amp;nbsp;exons.&lt;/p&gt;
&lt;p&gt;As always, I will post the code of this demo at my &lt;a href="https://github.com/antoniocampos13/portfolio/tree/master/R/2022-03-21_Integrate_R_Python_Reticulate"&gt;portfolio&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;R script: part&amp;nbsp;1/2&lt;/h2&gt;
&lt;p&gt;I will start by listing the R packages I will use for the demonstration. Install them with &lt;code&gt;install.packages()&lt;/code&gt; or &lt;code&gt;BiocManager::install()&lt;/code&gt; if they are &lt;a href="https://bioconductor.org/"&gt;Bioconductor&lt;/a&gt; packages (install &lt;code&gt;BiocManager&lt;/code&gt; with &lt;code&gt;install.packages()&lt;/code&gt; as&amp;nbsp;well).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tidyverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reticulate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Biocondutctor packages&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GenomicRanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BSgenome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BSgenome.Hsapiens.UCSC.hg38&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, using &lt;code&gt;here()&lt;/code&gt; package, I will create the full path of a &lt;a href="http://gmod.org/wiki/GFF3"&gt;&lt;code&gt;GFF3&lt;/code&gt;&lt;/a&gt; file. The &lt;code&gt;GFF3&lt;/code&gt; format stores genomic features in a text file to help represent genomic data. This file in question contains features of the whole human genome. Since it is a big file, download it at the &lt;a href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/"&gt;&lt;span class="caps"&gt;NCBI&lt;/span&gt;&amp;#8217;s &lt;span class="caps"&gt;FTP&lt;/span&gt; site&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;gffPath&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GCA_000001405.15_GRCh38_full_analysis_set.refseq_annotation.gff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit the path using &lt;a href="https://here.r-lib.org/"&gt;&lt;code&gt;here()&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s&lt;/a&gt; syntax if&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;To keep things simple, I create a vector with just two&amp;nbsp;genes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;genes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FMR1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I can start working with the Python script. If you use &lt;code&gt;conda&lt;/code&gt; environments to work with Python as I do, you can select the environment with &lt;code&gt;reticulate&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;use_condaenv()&lt;/code&gt; function. In this case, I will use my &lt;a href="https://antoniocampos13.github.io/setting-up-your-unix-computer-for-bioinformatics-analysis.html"&gt;&lt;code&gt;bioenv&lt;/code&gt;&lt;/a&gt;&amp;nbsp;environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;use_condaenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bioenv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code&gt;here()&lt;/code&gt; again, I set up the path for the Python script. Then, I use &lt;code&gt;reticulate&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;source_python()&lt;/code&gt; function to run the Python&amp;nbsp;script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pythonScript&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reticulate_demo_Python_side.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;source_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonScript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let me show you the contents of this&amp;nbsp;script.&lt;/p&gt;
&lt;h2&gt;Python&amp;nbsp;script&lt;/h2&gt;
&lt;p&gt;The modules I will use for the demonstration will be &lt;a href="https://github.com/biocore-ntnu/pyranges"&gt;&lt;code&gt;pyranges&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://pandas.pydata.org/"&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;. I surmise &lt;code&gt;pyranges&lt;/code&gt;  calls &lt;code&gt;pandas&lt;/code&gt; in the background, but &lt;a href="https://peps.python.org/pep-0020/"&gt;explicit is better than implicit&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyranges&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pr&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Remember to install all the necessary Python modules in the environment beforehand with &lt;code&gt;conda&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda install -c bioconda pyranges
&lt;span class="c1"&gt;# or&lt;/span&gt;
pip install pyranges
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, I read the &lt;code&gt;GFF3&lt;/code&gt; file into the Python session using &lt;code&gt;pyranges&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;read_gff3()&lt;/code&gt; function. Since I saved the file path into R&amp;#8217;s &lt;code&gt;gffPath&lt;/code&gt; object, I must use the &lt;code&gt;r.&lt;/code&gt; prefix to bring it into the Python session, like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;grch38_gff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_gff3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gffPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I append the &lt;code&gt;.df&lt;/code&gt; suffix into the  &lt;code&gt;grch38_gff&lt;/code&gt; Python object to convert it into a &lt;code&gt;pandas&lt;/code&gt; data frame to facilitate the search for the genes I established into the R&amp;nbsp;session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grch38_gff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I will search for the genes with &lt;code&gt;pandas&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;str.contains()&lt;/code&gt; method. To do this, I must create a regex string. I will append a &lt;code&gt;$&lt;/code&gt; to the end of each gene name to match the whole gene&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I will use a list comprehension and Python&amp;#8217;s &lt;code&gt;join()&lt;/code&gt; method to create the search string&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;search_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;genes&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;search_string&lt;/code&gt; object turns up like this (remember that the pipe &lt;code&gt;|&lt;/code&gt; character means &amp;#8220;or&amp;#8221; in&amp;nbsp;regex):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# outputs: &lt;/span&gt;
&lt;span class="c1"&gt;# HTT$|FMR1$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I can finally filter the data frame to include only those&amp;nbsp;genes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gene&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The line above concludes the Python script. Now let us return to the R script to wrap things&amp;nbsp;up.&lt;/p&gt;
&lt;h2&gt;R script: part&amp;nbsp;2/2&lt;/h2&gt;
&lt;p&gt;We can retrieve Python objects into the R session similarly to the other around. We must use the prefix &lt;code&gt;py$&lt;/code&gt; in R to get the objects generated by Python (the ones outputted by the&amp;nbsp;script).&lt;/p&gt;
&lt;p&gt;Therefore, I will retrieve the data frame &lt;code&gt;df&lt;/code&gt; object and assign it to the &lt;code&gt;exonsCoordinates&lt;/code&gt; R&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;exonsCoordinates&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before working with it, let me source a function that will retrieve the exon sequences using the &lt;a href="https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html"&gt;&lt;code&gt;GenomicRanges&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;pyranges&lt;/code&gt; is Python&amp;#8217;s &lt;code&gt;GenomicRanges&lt;/code&gt; analog), &lt;a href="https://bioconductor.org/packages/release/bioc/html/BSgenome.html"&gt;&lt;code&gt;BSgenome&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://bioconductor.org/packages/release/data/annotation/html/BSgenome.Hsapiens.UCSC.hg38.html"&gt;&lt;code&gt;BSgenome.Hsapiens.UCSC.hg38&lt;/code&gt;&lt;/a&gt;&amp;nbsp;packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;getSequence.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Function code (getSequence.R file):&lt;/span&gt;
&lt;span class="n"&gt;getSequence&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;gr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;GenomicRanges&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;GRanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glue&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;glue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{chr}:{start}-{end}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;refBase&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;BSgenome&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getSeq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BSgenome.Hsapiens.UCSC.hg38&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BSgenome.Hsapiens.UCSC.hg38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;refBase&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;refBase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;refBase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The first use of BSgenome/BSgenome.Hsapiens.&lt;span class="caps"&gt;UCSC&lt;/span&gt;.hg38 will prompt the download of human genomic sequence caches to be saved into a specific location on your computer. Be sure you have sufficient data allowances and&amp;nbsp;space.&lt;/p&gt;
&lt;p&gt;Finally, using &lt;code&gt;tidyverse&lt;/code&gt; (&lt;code&gt;dplyr&lt;/code&gt;) pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; syntax, I create a new column in the data frame (&lt;code&gt;mutate()&lt;/code&gt;) using the &lt;code&gt;Chromosome&lt;/code&gt;, &lt;code&gt;Start&lt;/code&gt;, and &lt;code&gt;End&lt;/code&gt; columns as arguments to my custom &lt;code&gt;getSequence()&lt;/code&gt; function. The new column will contain the exon sequences. Observe the use of &lt;code&gt;rowwise()&lt;/code&gt; and &lt;code&gt;ungroup()&lt;/code&gt;. Since my function is not vectorized, I must use it row-wise instead of column-wise. The first function ensures this. The second function restores the data frame to its column-wise nature after &lt;code&gt;getSequence()&lt;/code&gt; finishes its job. Then, I select just some of the columns of the data frame with &lt;code&gt;dplyr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;select()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;exonsCoordinatesClean&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;exonsCoordinates&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;rowwise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getSequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Chromosome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;ungroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Chromosome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Strand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, I&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demonstrated how to run a Python script with &lt;code&gt;reticulate&lt;/code&gt; without leaving an active R&amp;nbsp;session;&lt;/li&gt;
&lt;li&gt;Explained how to retrieve Python objects into an R session and&amp;nbsp;vice-versa.&lt;/li&gt;
&lt;li&gt;Demonstrated a simple function that retrieves nucleotide sequences from human genome using chromosome&amp;nbsp;coordinates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Subscribe to my &lt;a href="https://antoniocampos13.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;, &lt;a href="https://antoniocampos13.github.io/feeds/all.atom.xml"&gt;Atom feed&lt;/a&gt; or &lt;a href="https://t.me/joinchat/AAAAAEYrNCLK80Fh1w8nAg"&gt;Telegram channel&lt;/a&gt; to keep you updated whenever I post new&amp;nbsp;content.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://rstudio.github.io/reticulate/"&gt;Interface to&amp;nbsp;Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/"&gt;Bioconductor -&amp;nbsp;Home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gmod.org/wiki/GFF3"&gt;&lt;span class="caps"&gt;GFF3&lt;/span&gt; - &lt;span class="caps"&gt;GMOD&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/"&gt;Index of /genomes/all/&lt;span class="caps"&gt;GCA&lt;/span&gt;/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://here.r-lib.org/"&gt;here | A Simpler Way to Find Your&amp;nbsp;Files&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://antoniocampos13.github.io/setting-up-your-unix-computer-for-bioinformatics-analysis.html"&gt;Setting Up Your Unix Computer for Bioinformatics&amp;nbsp;Analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/biocore-ntnu/pyranges"&gt;GitHub - biocore-ntnu/pyranges: Performant Pythonic&amp;nbsp;GenomicRanges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pandas.pydata.org/"&gt;pandas - Python Data Analysis&amp;nbsp;Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://peps.python.org/pep-0020/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 20 – The Zen of Python |&amp;nbsp;peps.python.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html"&gt;GenomicRanges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/BSgenome.html"&gt;BSgenome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/packages/release/data/annotation/html/BSgenome.Hsapiens.UCSC.hg38.html"&gt;BSgenome.Hsapiens.&lt;span class="caps"&gt;UCSC&lt;/span&gt;.hg38&lt;/a&gt;&lt;/p&gt;</content><category term="R"></category><category term="reticulate"></category><category term="gff"></category><category term="GenomicRanges"></category><category term="pyranges"></category><category term="BSgenome"></category></entry><entry><title>Making an Interactive Map with Shiny and Leaflet in R</title><link href="https://antoniocampos13.github.io/making-an-interactive-map-with-shiny-and-leaflet-in-r.html" rel="alternate"></link><published>2021-02-18T09:00:00-03:00</published><updated>2021-02-18T09:00:00-03:00</updated><author><name>Antonio Victor Campos Coelho</name></author><id>tag:antoniocampos13.github.io,2021-02-18:/making-an-interactive-map-with-shiny-and-leaflet-in-r.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt; is a R package developed and maintained by the &lt;a href="https://rstudio.com/"&gt;RStudio&lt;/a&gt; team. With Shiny, anyone can build interactive web apps to help data visualization. Here I present a simple template of an interactive Brazilian map displaying fictitious allelic frequencies with samples sizes across the country. It is a useful …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt; is a R package developed and maintained by the &lt;a href="https://rstudio.com/"&gt;RStudio&lt;/a&gt; team. With Shiny, anyone can build interactive web apps to help data visualization. Here I present a simple template of an interactive Brazilian map displaying fictitious allelic frequencies with samples sizes across the country. It is a useful visualization for multicentric studies results and systematic reviews, for&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;As always, the code of this demo will be posted at my &lt;a href="https://github.com/antoniocampos13/portfolio/tree/master/R/2021-02-18_Interactive_map_with_shiny"&gt;portfolio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The intention of this interactive map is that the user can choose a gene and then a variant in two separate dropdown menus and check the allelic frequencies and sample sizes being automatically plotted on the map. See below a print screen of the final&amp;nbsp;product:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The final product: an interactive Shiny/leaflet map" src="https://antoniocampos13.github.io/images/shiny_map_result.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Loading necessary&amp;nbsp;packages&lt;/h2&gt;
&lt;p&gt;First, I will load some packages that will help me create a toy&amp;nbsp;dataset:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openxlsx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have talked about &lt;code&gt;here&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; (from &lt;code&gt;tidyverse&lt;/code&gt;) packages &lt;a href="https://antoniocampos13.github.io/data-manipulation-with-r.html"&gt;before&lt;/a&gt;. In my opinion, &lt;code&gt;openxlsx&lt;/code&gt; is the best option to read Excel spreadsheets, since it does not require external dependencies, such as Java, to work (I had some problems with Java before trying to read large spreadsheets in R). The package &lt;a href="https://cran.r-project.org/web/packages/ids/index.html"&gt;&lt;code&gt;ids&lt;/code&gt;&lt;/a&gt; serves to generate random or human readable and pronounceable identifiers. Lastly, the &lt;a href="https://cran.r-project.org/web/packages/maps/maps.pdf"&gt;&lt;code&gt;maps&lt;/code&gt;&lt;/a&gt; package will provide geographic coordinates of the Brazilian states capitals to help center the information in my interactive&amp;nbsp;map.&lt;/p&gt;
&lt;h2&gt;Creating the toy&amp;nbsp;dataset&lt;/h2&gt;
&lt;h3&gt;Creating data&amp;nbsp;points&lt;/h3&gt;
&lt;p&gt;The dataset will contain fictitious allele frequencies from samples across Brazil. Brazil is a large country that has 26 states plus a federal district, making it 27 federative units, but to simplify things, I will call it &amp;#8220;states&amp;#8221; hereafter. Now, let&amp;#8217;s imagine that I would genotype two variants from three genes each in all 27 states and determined the minor allele frequency by counting how many alleles were present among the sample size of the state. Let&amp;#8217;s assume the genes are located on autosomes (the non-sexual chromosomes). Thus, I would have &lt;code&gt;27 * 3 * 2 = 162&lt;/code&gt; data points corresponding to the allele frequency for each variant in each state. To make the script customizable, I assign every number to an&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GENES&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;VARIANTS&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;STATES&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;
&lt;span class="n"&gt;DATAPOINTS&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;GENES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;VARIANTS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;STATES&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I will set the random seed to make some reproducible dataset and then create two vectors with the base R &lt;code&gt;sample()&lt;/code&gt; function. The first vector will contain 162 random numbers between 25 and 80 to represent the allele counts from the variants. The second vector will contain 27 random numbers between 100 and 500 to represent sample sizes for each state. Notice how I am multiplying by two, to ensure that sample sizes will be even numbers only, since every individual usually contributes two alleles to the sample&amp;nbsp;size:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;set.seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;alleles_count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;DATAPOINTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;alleles_total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;STATES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, using the &lt;code&gt;ids&lt;/code&gt; package I create two more vectors: one representing fictitious genes and the other, fictitious variants, respectively with the &lt;code&gt;random_id()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;genes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GENES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_openssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;var_ids&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GENES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;VARIANTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_openssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the first argument is the number of desired random ids, so I put the constants I defined&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;Now I have two vectors that will generate the 162 data points (allelic frequencies). I will now prepare the geographic coordinates that will be needed when plotting the&amp;nbsp;map.&lt;/p&gt;
&lt;h3&gt;Getting the&amp;nbsp;coordinates&lt;/h3&gt;
&lt;p&gt;To simplify things, I listed all 27 state capitals in a spreadsheet titled &lt;code&gt;states_capitals.xlsx&lt;/code&gt;. I then loaded it in R and associated one sample size to one state (&lt;code&gt;alleles_states&lt;/code&gt; data&amp;nbsp;frame):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;read.xlsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;states_capitals.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;alleles_states&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;bind_cols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alleles_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alleles_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="State capitals spreadsheet" src="https://antoniocampos13.github.io/images/state_capitals.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Next, I filter a special dataset named &lt;code&gt;world.cities&lt;/code&gt; with the name of the Brazilian state capitals using &lt;code&gt;dplyr&lt;/code&gt; pipes. This huge dataset contains names, countries, latitude and longitude from several cities of the world and is imported by the &lt;code&gt;maps&lt;/code&gt; package when I loaded&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;world.cities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# prints out --&amp;gt; [1] 43645     6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check the &lt;code&gt;dplyr&lt;/code&gt; pipes&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;world.cities&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country.etc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Brazil&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;%in%&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;capital&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;-26.48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let me explain. First, I obtaining only Brazilian cities by using &lt;code&gt;filter(country.etc == "Brazil")&lt;/code&gt;. Then, I filtered the &lt;code&gt;name&lt;/code&gt; column to get only the Brazilian state capitals by using the keyword &lt;code&gt;%in%&lt;/code&gt; and using the &lt;code&gt;capital&lt;/code&gt; column of the &lt;code&gt;br&lt;/code&gt; data frame. The &lt;code&gt;filter(lat != -26.48)&lt;/code&gt; argument is to remove a city from Paraná state that has the same name of the Tocantins state capital (Palmas). The &lt;code&gt;lat&lt;/code&gt; means the latitude column. Next, I create a new column with &lt;code&gt;mutate()&lt;/code&gt; to unite latitude and longitude coordinates to their respective capital. Notice that I could only do that because &lt;code&gt;br$capital&lt;/code&gt; filter maintained the same order of the cities as it was in the input spreadsheet. Finally, I clean the data frame up by selecting only the coordinates and the state abbreviation. The result is&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;lat&lt;/span&gt;   &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;-10.91&lt;/span&gt; &lt;span class="m"&gt;-37.07&lt;/span&gt;    &lt;span class="n"&gt;SE&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="m"&gt;-1.44&lt;/span&gt; &lt;span class="m"&gt;-48.50&lt;/span&gt;    &lt;span class="n"&gt;PA&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;-19.92&lt;/span&gt; &lt;span class="m"&gt;-43.94&lt;/span&gt;    &lt;span class="n"&gt;MG&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;   &lt;span class="m"&gt;2.83&lt;/span&gt; &lt;span class="m"&gt;-60.66&lt;/span&gt;    &lt;span class="n"&gt;RR&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;-15.78&lt;/span&gt; &lt;span class="m"&gt;-47.91&lt;/span&gt;    &lt;span class="n"&gt;DF&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;-20.45&lt;/span&gt; &lt;span class="m"&gt;-54.63&lt;/span&gt;    &lt;span class="n"&gt;MS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Joining&amp;nbsp;everything&lt;/h3&gt;
&lt;p&gt;Now let&amp;#8217;s combine three vectors: state abbreviations, genes and variants in a single data frame. First I create a small data frame combining the gene ids with the variants ids to ensure each gene has two unique&amp;nbsp;variants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;gene_var_comb&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;bind_cols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VARIANTS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I combine the state abbreviations vector with the variants vector, making the 162 data points skeleton, and with two inner joins, I can now identify each variant by its corresponding gene and each state with its corresponding sample&amp;nbsp;size:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;combinations&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;expand.grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gene_var_comb&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class="nf"&gt;inner_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene_var_comb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;variant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;inner_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alleles_states&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [1] 162   4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See that it has the correct dimensions: 162 rows (data points) and four columns (state, gene, variant and sample size). Now let&amp;#8217;s complete the data frame by merging the &lt;code&gt;alleles_count&lt;/code&gt; vector, joining the coordinates and calculating the minor allele&amp;nbsp;frequency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;map_data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;bind_cols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="c1"&gt;#                  alleles_count = alleles_count) %&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;inner_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alleles_count&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;alleles_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;state&lt;/span&gt;      &lt;span class="n"&gt;variant&lt;/span&gt;     &lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="n"&gt;alleles_total&lt;/span&gt; &lt;span class="n"&gt;alleles_count&lt;/span&gt;    &lt;span class="n"&gt;lat&lt;/span&gt;   &lt;span class="n"&gt;long&lt;/span&gt;       &lt;span class="n"&gt;freq&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;SE&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;cf8ac7cc786&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b290a87&lt;/span&gt;           &lt;span class="m"&gt;426&lt;/span&gt;            &lt;span class="m"&gt;55&lt;/span&gt; &lt;span class="m"&gt;-10.91&lt;/span&gt; &lt;span class="m"&gt;-37.07&lt;/span&gt; &lt;span class="m"&gt;0.12910798&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;PA&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;cf8ac7cc786&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b290a87&lt;/span&gt;           &lt;span class="m"&gt;264&lt;/span&gt;            &lt;span class="m"&gt;39&lt;/span&gt;  &lt;span class="m"&gt;-1.44&lt;/span&gt; &lt;span class="m"&gt;-48.50&lt;/span&gt; &lt;span class="m"&gt;0.14772727&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="n"&gt;MG&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;cf8ac7cc786&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b290a87&lt;/span&gt;           &lt;span class="m"&gt;176&lt;/span&gt;            &lt;span class="m"&gt;75&lt;/span&gt; &lt;span class="m"&gt;-19.92&lt;/span&gt; &lt;span class="m"&gt;-43.94&lt;/span&gt; &lt;span class="m"&gt;0.42613636&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="n"&gt;RR&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;cf8ac7cc786&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b290a87&lt;/span&gt;           &lt;span class="m"&gt;206&lt;/span&gt;            &lt;span class="m"&gt;38&lt;/span&gt;   &lt;span class="m"&gt;2.83&lt;/span&gt; &lt;span class="m"&gt;-60.66&lt;/span&gt; &lt;span class="m"&gt;0.18446602&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="n"&gt;DF&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;cf8ac7cc786&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b290a87&lt;/span&gt;           &lt;span class="m"&gt;372&lt;/span&gt;            &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;-15.78&lt;/span&gt; &lt;span class="m"&gt;-47.91&lt;/span&gt; &lt;span class="m"&gt;0.07258065&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="n"&gt;MS&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;cf8ac7cc786&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b290a87&lt;/span&gt;           &lt;span class="m"&gt;496&lt;/span&gt;            &lt;span class="m"&gt;66&lt;/span&gt; &lt;span class="m"&gt;-20.45&lt;/span&gt; &lt;span class="m"&gt;-54.63&lt;/span&gt; &lt;span class="m"&gt;0.13306452&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I will save the toy dataset into a R object that will be loaded when we launch the Shiny app. I saved inside the &lt;code&gt;map/data&lt;/code&gt; folder for reasons that will be clear in a&amp;nbsp;moment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map_data.RData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Creating named list of genes and&amp;nbsp;variants&lt;/h2&gt;
&lt;p&gt;I need a named list of genes and variants to make the dropdown menus as intended. So, again I used some &lt;code&gt;dplyr&lt;/code&gt; pipes and a &lt;code&gt;lapply&lt;/code&gt; loop to accomplish&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;gene_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;map_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;group_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collapse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="nf"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;varstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;genes_variants&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;seq_along&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene_list&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nf"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;strsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene_list&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;varstring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genes_variants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;gene_list&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;

&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genes_variants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;genes_variants.RData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is a named list: each element of the list is a vector, and each of these vectors are named after a gene. Each vector, in turn, contains the corresponding&amp;nbsp;variants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genes_variants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;`6b290a87`&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6cf8ac7cc786&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c1c7fc20d1b9&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;`153a782d`&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6aab8d277c3c&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4c9ff4a7f4fb&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;b053b654&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;adf90f0908c9&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c523d6d80697&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that I also saved it into the &lt;code&gt;map/data&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── map
│   └── data
│       ├── genes_variants.RData
│       └── map_data.RData
├── map_data.R # contains the code demonstrated here
└── state_capitals.xlsx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Creating Shiny &lt;code&gt;ui.R&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;We can divide the Shiny app internals in two main functions: &lt;code&gt;ui&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt;. The former will manage the user interface of the app (the front-end) and the latter will manipulate the data for interactive visualization (the back-end). I will save each function into two separate files, &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt;. Let&amp;#8217;s examine the &lt;code&gt;ui.R&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fluidPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nf"&gt;titlePanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Toy Dataset: Variants in Brazil&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="nf"&gt;sidebarLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;sidebarPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nf"&gt;selectInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gene&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Choose a gene&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genes_variants&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="nf"&gt;selectInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;variant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Choose a variant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genes_variants&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;


    &lt;span class="nf"&gt;mainPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nf"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The circles&amp;#39; diameters are proportional to sample size. Hover them with the cursor to see allelic frequencies. Click to see sample size (number of alleles).&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

      &lt;span class="nf"&gt;leafletOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;fluidPage()&lt;/code&gt; Shiny function creates an webpage that fits browser dimensions and generate the overall layout of the app. This function receives other functions as arguments. Each function will take care of one aspect of the layout. The first function, &lt;code&gt;titlePanel()&lt;/code&gt; generates the main title of the app, the second, &lt;code&gt;sidebarLayout()&lt;/code&gt; instructs Shiny to create an app with a sidebar and a main panel. The arguments of this function will control the elements inside each&amp;nbsp;area.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sidebarPanel()&lt;/code&gt; function builds the sidebar. Since I wanted the dropdown menus to be placed in the sidebar, I enclose two &lt;code&gt;selectInput()&lt;/code&gt; functions, one for the genes and one for the variants. Notice that it requires three arguments: an internal name (&amp;#8220;genes&amp;#8221; or &amp;#8220;variant&amp;#8221;) so the &lt;code&gt;server&lt;/code&gt; function can access the inputs, a human-readable label (&amp;#8220;Choose a gene&amp;#8221;, &amp;#8220;Choose a variant&amp;#8221;) and the input options. Notice that I am referring to the &lt;code&gt;genes_variants&lt;/code&gt; named list I created in the previous&amp;nbsp;step.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mainPanel()&lt;/code&gt; function builds the main panel. The map will be placed there. The &lt;code&gt;hx()&lt;/code&gt; function creates a header, where &lt;code&gt;x&lt;/code&gt; is an integer between 1 and 6. The lower the number, the higher is the level of the header. Thus, &lt;code&gt;h1()&lt;/code&gt; generates big headers, &lt;code&gt;h2()&lt;/code&gt; generates a smaller header and so on. I chose &lt;code&gt;h4()&lt;/code&gt; to enclose a brief description of how to interact with the map. The &lt;code&gt;leafletOutput()&lt;/code&gt; function will build the map. It is a function from the &lt;code&gt;leaflet&lt;/code&gt; package. The argument &lt;code&gt;outputId&lt;/code&gt; creates the internal name of the output to be accessed by the &lt;code&gt;server&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;Creating Shiny &lt;code&gt;server.R&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;It contains the &lt;code&gt;server&lt;/code&gt; function that receive three arguments: &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt;. Notice that we must wrote the &lt;code&gt;server&lt;/code&gt; function, whereas the &lt;code&gt;ui&lt;/code&gt; function is mostly controlled by the Shiny package itself. See&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nf"&gt;updateSelectInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;variant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genes_variants&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="n"&gt;data_subset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;map_data&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;renderLeaflet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nf"&gt;leaflet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;data_subset&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
      &lt;span class="nf"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-14.235004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-51.92528&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
      &lt;span class="nf"&gt;addTiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
      &lt;span class="nf"&gt;addCircles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alleles_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alleles: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alleles_total&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; Allele frequency: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
        &lt;span class="n"&gt;fillOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The user options during the interaction with the app will be stored into the &lt;code&gt;input&lt;/code&gt; object. The &lt;code&gt;output&lt;/code&gt; will access the output id defined in the &lt;code&gt;ui.R&lt;/code&gt; file (&amp;#8220;map&amp;#8221;). The &lt;code&gt;session&lt;/code&gt; object will keep track of the different options of the user. For example, the user must choose a gene. Then, the variant dropdown menu must change accordingly to display the variants of said gene. This is why I included the &lt;code&gt;observe()&lt;/code&gt; function. Anytime the user chooses a different gene, the &lt;code&gt;updateSelectInput()&lt;/code&gt; will change the &amp;#8220;variant&amp;#8221; &lt;code&gt;selectInput()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each user selection will display different data on the map. Therefore, the &lt;code&gt;data_subset(reactive())&lt;/code&gt; nested functions will take the user input and &lt;strong&gt;filter&lt;/strong&gt; the desired data stored in the &lt;code&gt;map_data&lt;/code&gt; object I created earlier. Notice that &lt;code&gt;input$gene&lt;/code&gt; and &lt;code&gt;input$variant&lt;/code&gt; are referring to the &lt;code&gt;selectInput()&lt;/code&gt; defined in the &lt;code&gt;ui.R&lt;/code&gt; file. They get the user option and populate the&amp;nbsp;filters.&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;code&gt;renderLeaflet()&lt;/code&gt; function output (controlled by the definitions enclosed in the &lt;code&gt;leaflet()&lt;/code&gt; function) will be assigned to the &lt;code&gt;output$map&lt;/code&gt; object. &amp;#8220;map&amp;#8221; is referring to the &lt;code&gt;outputId&lt;/code&gt; defined in the &lt;code&gt;ui.R&lt;/code&gt; file, therefore making the map appear on the main&amp;nbsp;panel.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s talk more about the &lt;code&gt;leaflet()&lt;/code&gt; function arguments. First, it receives as input the &lt;code&gt;data_subset()&lt;/code&gt; output, which is the filtered data based on the user input. Using &lt;code&gt;dplyr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s pipes, I pass other options to the function. The &lt;code&gt;setView()&lt;/code&gt; function serves to center the map on the specified latitude and longitude, as well as the zoom level. The &lt;code&gt;addCircles()&lt;/code&gt; will plot circles based on the geographic coordinates stored in the filtered &lt;code&gt;map_data&lt;/code&gt; object. To make circle size appear proportional as the sample size, I multiply the square root of the sample size by a constant. Next, I created two labels: one that appears on clicking and the other appears on hovering the circle so the user can see sample size and allele frequency,&amp;nbsp;respectively.&lt;/p&gt;
&lt;h2&gt;Creating &lt;code&gt;global.R&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;The optional &lt;code&gt;global.R&lt;/code&gt; file contents are read during the Shiny app initialization and are placed in global scope during the app execution session. Therefore, it is useful when there is the need to load data and packages necessary for the app buildup, which is exactly my case: I need to load the map data, the gene lists, and the &lt;code&gt;leaflet&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; packages. Provided that the &lt;code&gt;ui&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; functions are saved in two different files (&lt;code&gt;ui.R&lt;/code&gt; and &lt;code&gt;server.R&lt;/code&gt;), the &lt;code&gt;global.R&lt;/code&gt; is automatically loaded during app&amp;nbsp;initialization.&lt;/p&gt;
&lt;p&gt;Check the &lt;code&gt;global.R&lt;/code&gt; file&amp;nbsp;contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data/map_data.RData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data/genes_variants.RData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaflet&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
  &lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;leaflet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;leaflet.extras&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaflet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
  &lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dplyr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, I load the data stored into the &lt;code&gt;map/data&lt;/code&gt; folder. Next, the &lt;code&gt;if(!require()){}&lt;/code&gt; constructs will check if the packages exist and load them or install and then load them&amp;nbsp;otherwise.&lt;/p&gt;
&lt;h2&gt;Executing the Shiny&amp;nbsp;app&lt;/h2&gt;
&lt;p&gt;It is very simple to execute a Shiny app locally. Simply place the &lt;code&gt;ui.R&lt;/code&gt;, &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;global.R&lt;/code&gt; (if it exists) inside a folder. I placed everything into the &lt;code&gt;map&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── map
│   ├── global.R
│   ├── server.R
│   ├── ui.R
│   └── data
│       ├── genes_variants.RData
│       └── map_data.RData
├── map_data.R
└── state_capitals.xlsx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, simply run the &lt;code&gt;runApp()&lt;/code&gt; Shiny function with the name of the folder (install Shiny if you have not&amp;nbsp;yet):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shiny&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
  &lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shiny&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shiny&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;runApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="c1"&gt;# shiny::runApp(&amp;quot;map&amp;quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just make sure the R session current working directory is the parent of the Shiny app folder, otherwise it will not work. Since I am running RStudio, a window containing the interactive map opens up and I can interact with the map. Otherwise you would have to open a browser window and go to the address displayed on the R console, something like &lt;code&gt;http://127.0.0.1:&amp;lt;some_port&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The interactive map is rather barebones, but it works. Try to replicate and improve it if you&amp;nbsp;wish!&lt;/p&gt;
&lt;h2&gt;Hosting Shiny apps on the&amp;nbsp;web&lt;/h2&gt;
&lt;p&gt;This demo showed how to locally execute a Shiny app. There are some options if you wish to host your app on the web to everyone use, both free and paid. For example, &lt;a href="https://www.shinyapps.io/"&gt;RStudio shinyapps.io&lt;/a&gt; offers free limited hosting of up to three apps. &lt;a href="https://www.digitalocean.com/products/droplets/"&gt;DigitalOcean&lt;/a&gt; offer small-scale paid services that can host Shiny apps (check a &lt;a href="https://deanattali.com/2015/05/09/setup-rstudio-shiny-server-digital-ocean/"&gt;great tutorial by Dean Attali&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion,&amp;nbsp;I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created toy data simulating allele counts across several regions of&amp;nbsp;Brazil;&lt;/li&gt;
&lt;li&gt;Showed how to obtain geographic&amp;nbsp;coordinates;&lt;/li&gt;
&lt;li&gt;Demonstrated how to create an interactive map with Shiny to visualize sample sizes and allelic frequencies displayed on a Brazilian&amp;nbsp;map.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Subscribe to my &lt;a href="https://antoniocampos13.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;, &lt;a href="https://antoniocampos13.github.io/feeds/all.atom.xml"&gt;Atom feed&lt;/a&gt; or &lt;a href="https://t.me/joinchat/AAAAAEYrNCLK80Fh1w8nAg"&gt;Telegram channel&lt;/a&gt; to keep you updated whenever I post new&amp;nbsp;content.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rstudio.com/"&gt;RStudio | Open source &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; professional software for data science&amp;nbsp;teams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://antoniocampos13.github.io/data-manipulation-with-r.html"&gt;Data manipulation with&amp;nbsp;R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cran.r-project.org/web/packages/ids/index.html"&gt;&lt;span class="caps"&gt;CRAN&lt;/span&gt; - Package&amp;nbsp;ids&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cran.r-project.org/web/packages/maps/maps.pdf"&gt;&lt;span class="caps"&gt;CRAN&lt;/span&gt; - Package&amp;nbsp;maps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.shinyapps.io/"&gt;shinyapps.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/products/droplets/"&gt;Droplets - Scalable Virtual Machines |&amp;nbsp;DigitalOcean&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://deanattali.com/2015/05/09/setup-rstudio-shiny-server-digital-ocean/"&gt;How to get your very own RStudio Server and Shiny Server with&amp;nbsp;DigitalOcean&lt;/a&gt;&lt;/p&gt;</content><category term="R"></category><category term="shiny"></category><category term="leaflet"></category><category term="data visualization"></category><category term="web app"></category></entry><entry><title>Differential Expression Analysis with edgeR in R</title><link href="https://antoniocampos13.github.io/differential-expression-analysis-with-edger-in-r.html" rel="alternate"></link><published>2020-10-26T09:50:00-03:00</published><updated>2020-10-26T09:50:00-03:00</updated><author><name>Antonio Victor Campos Coelho</name></author><id>tag:antoniocampos13.github.io,2020-10-26:/differential-expression-analysis-with-edger-in-r.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="https://antoniocampos13.github.io/data-manipulation-with-r.html#data-manipulation-with-r"&gt;previous post&lt;/a&gt; I demonstrated how to organize the &lt;a href="https://antoniocampos13.github.io/working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1.html"&gt;&lt;span class="caps"&gt;CGC&lt;/span&gt; prostate cancer data&lt;/a&gt; to a format suited to differential expression analysis (&lt;span class="caps"&gt;DEA&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Nowadays, &lt;span class="caps"&gt;DEA&lt;/span&gt; usually arises from high-throughput sequencing of a collection (library) of &lt;span class="caps"&gt;RNA&lt;/span&gt; molecules expressed by single cells or tissue given their conditions upon collection and …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="https://antoniocampos13.github.io/data-manipulation-with-r.html#data-manipulation-with-r"&gt;previous post&lt;/a&gt; I demonstrated how to organize the &lt;a href="https://antoniocampos13.github.io/working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1.html"&gt;&lt;span class="caps"&gt;CGC&lt;/span&gt; prostate cancer data&lt;/a&gt; to a format suited to differential expression analysis (&lt;span class="caps"&gt;DEA&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Nowadays, &lt;span class="caps"&gt;DEA&lt;/span&gt; usually arises from high-throughput sequencing of a collection (library) of &lt;span class="caps"&gt;RNA&lt;/span&gt; molecules expressed by single cells or tissue given their conditions upon collection and &lt;span class="caps"&gt;RNA&lt;/span&gt;&amp;nbsp;extraction.&lt;/p&gt;
&lt;p&gt;In terms of statistical analysis, &lt;span class="caps"&gt;DEA&lt;/span&gt; &lt;a href="https://www.ebi.ac.uk/training/online/course/functional-genomics-ii-common-technologies-and-data-analysis-methods/differential-gene"&gt;&amp;#8220;means taking the normalized read count data and performing statistical analysis to discover quantitative changes in expression levels between experimental groups&amp;#8221;&lt;/a&gt;. What are experimental groups? Consider for example, diseased versus healthy cells, treated cells versus non-treated cells (when someone is testing new drugs for example), and so&amp;nbsp;on.&lt;/p&gt;
&lt;h2&gt;The edgeR&amp;nbsp;package&lt;/h2&gt;
&lt;p&gt;There are some statistical packages in R that deal with &lt;span class="caps"&gt;DEA&lt;/span&gt;, such as &lt;code&gt;edgeR&lt;/code&gt;, &lt;code&gt;DESeq2&lt;/code&gt; and &lt;code&gt;limma&lt;/code&gt;. Here I will demonstrate a custom script to perform &lt;span class="caps"&gt;DEA&lt;/span&gt; with &lt;a href="https://bioconductor.org/packages/release/bioc/html/edgeR.html"&gt;&lt;code&gt;edgeR&lt;/code&gt;&lt;/a&gt;. The demonstration here is on Windows 10, but the same steps can be performed on Unix&amp;nbsp;systems.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;edgeR&lt;/code&gt; performs &lt;span class="caps"&gt;DEA&lt;/span&gt; for pre-defined genomic features, which can be genes, transcripts or exons, for example. In the present demonstration, we will quantify transcripts. Remember that genes can produce several transcripts through alternative splicing. The &lt;code&gt;edgeR&lt;/code&gt; statistical model is based on negative binomial distribution. Prior to statistical analysis, &lt;code&gt;edgeR&lt;/code&gt; normalizes gene/transcript expression counts via the Trimmed Mean of M-values (&lt;span class="caps"&gt;TMM&lt;/span&gt;) method. See &lt;a href="https://www.biostars.org/p/284775/#284893"&gt;Dr. Kevin Blighe&amp;#8217;s comment in a Biostars forum topic&lt;/a&gt; for a brief discussion of &lt;code&gt;edgeR&lt;/code&gt; and other &lt;span class="caps"&gt;DEA&lt;/span&gt;&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;Without further ado, I will show how to set up a R session to run a &lt;span class="caps"&gt;DEA&lt;/span&gt; with &lt;code&gt;edgeR&lt;/code&gt;, and how to interpret results. As usual, the code presented here is deposited on my &lt;a href="https://github.com/antoniocampos13/portfolio/tree/master/R/2020_10_22_DEA_with_edgeR"&gt;portfolio at GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Install and load&amp;nbsp;packages&lt;/h2&gt;
&lt;p&gt;First, I will install some new packages that I have not talked about. The first one is &lt;a href="https://www.rdocumentation.org/packages/openxlsx/versions/4.2.2"&gt;&lt;code&gt;openxlsx&lt;/code&gt;&lt;/a&gt;, which is a package used to read/write Microsoft Office Excel spreadsheets. I will use it to conveniently save the output of the &lt;span class="caps"&gt;DEA&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The second is &lt;a href="https://www.rdocumentation.org/packages/BiocManager/versions/1.30.10"&gt;&lt;code&gt;BiocManager&lt;/code&gt;&lt;/a&gt;. It is needed to install packages from &lt;a href="https://www.bioconductor.org/"&gt;Bioconductor project&lt;/a&gt;, which hosts Bioinformatics analysis packages that are not on the default R package&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;The command below contains other packages I have used before, edit the comment if you already installed&amp;nbsp;them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Run only once&lt;/span&gt;
&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tidyverse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;openxlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BiocManager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I install &lt;code&gt;edgeR&lt;/code&gt; and some more packages from Bioconductor. I will use them to annotate and convert the transcript/gene IDs to a gene symbol. Check their documentation: &lt;a href="https://www.bioconductor.org/packages/release/bioc/html/AnnotationDbi.html"&gt;&lt;code&gt;AnnotationDbi&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://www.rdocumentation.org/packages/annotate/versions/1.50.0"&gt;&lt;code&gt;annotate&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html"&gt;&lt;code&gt;org.Hs.eg.db&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://bioconductor.org/packages/release/data/annotation/html/EnsDb.Hsapiens.v79.html"&gt;&lt;code&gt;EnsDb.Hsapiens.v79&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.rdocumentation.org/packages/ensembldb/versions/1.4.7"&gt;&lt;code&gt;ensembldb&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Run only once&lt;/span&gt;
&lt;span class="n"&gt;BiocManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;edgeR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AnnotationDbi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;annotate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;org.Hs.eg.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;EnsDb.Hsapiens.v79&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ensembldb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;::&lt;/code&gt; is used when we wish to invoke the mentioned package directly (&lt;code&gt;BiocManager&lt;/code&gt; in this case), without loading it into the&amp;nbsp;memory.&lt;/p&gt;
&lt;p&gt;Now, I will load just the &lt;code&gt;here&lt;/code&gt; package to handle file paths for now, the rest will be loaded into R&amp;nbsp;later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I will use the &lt;code&gt;counts&lt;/code&gt; data frame I produced &lt;a href="https://antoniocampos13.github.io/data-manipulation-with-r.html"&gt;last time&lt;/a&gt;. Since I have saved it to my disk, I load it into the current R session. If you already have the &lt;code&gt;counts&lt;/code&gt; data frame loaded in the session from the previous demonstration, this step is not&amp;nbsp;necessary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;counts.RData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I load the custom &lt;code&gt;edgeR_setup()&lt;/code&gt; function I use to perform &lt;span class="caps"&gt;DEA&lt;/span&gt; with &lt;code&gt;edgeR&lt;/code&gt;. I wrote the function in a R script with the same name and saved it on my &lt;code&gt;src&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;edgeR_setup.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Careful to not confuse the &lt;code&gt;load()&lt;/code&gt; with &lt;code&gt;source()&lt;/code&gt; functions. The &lt;a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/load"&gt;former&lt;/a&gt; is used with R objects (&lt;code&gt;*.RData&lt;/code&gt;) as input, whereas the &lt;a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/source"&gt;latter&lt;/a&gt; takes a R script (&lt;code&gt;*.R&lt;/code&gt;) as input and parses the commands contained in the&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Check the &lt;code&gt;edgeR_setup.R&lt;/code&gt; script. First, it loads the packages I installed&amp;nbsp;before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tidyverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openxlsx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Install trough BiocManager&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edgeR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org.Hs.eg.db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EnsDb.Hsapiens.v79&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ensembldb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AnnotationDbi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, check the function&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;edger_setup&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gene_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NCBI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ENSEMBL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SYMBOL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;# ... the function goes here ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: A string. An identifier for the&amp;nbsp;experiment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counts&lt;/code&gt;: The data frame containing the transcript&amp;nbsp;counts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replicates&lt;/code&gt;: A Boolean indicating if the samples are biological replicates. Defaults to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: A Boolean indicating if lowly expressed transcripts should be filter out. Defaults to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gene_id&lt;/code&gt;: A string indicating how transcripts are identified in the data frame. There are three options:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NCBI&lt;/code&gt;: &lt;a href="https://www.ncbi.nlm.nih.gov/Class/MLACourse/Modules/Genes/sample_entrez_gene_record.html"&gt;Entrez Gene Record&amp;nbsp;ids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENSEMBL&lt;/code&gt;: &lt;a href="https://www.ebi.ac.uk/training-beta/online/courses/ensembl-browsing-genomes/navigating-ensembl/investigating-a-gene/"&gt;&lt;span class="caps"&gt;ENSEMBL&lt;/span&gt; ids (&lt;span class="caps"&gt;ENS&lt;/span&gt;#)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYMBOL&lt;/code&gt;: &lt;a href="https://www.genenames.org/"&gt;Official &lt;span class="caps"&gt;HGNC&lt;/span&gt; gene&amp;nbsp;symbol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_path&lt;/code&gt;: A path and filename string where the results will be saved in Excel spreadsheet format. Example: &lt;code&gt;"\some\path\results.xlsx"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The use of &lt;code&gt;edgeR&lt;/code&gt; to analyze datasets with no biological replicates (&lt;code&gt;replicates = FALSE&lt;/code&gt;) is discouraged. However, I prepared a special dataset of housekeeping genes based on the work by &lt;a href="https://www.cell.com/trends/genetics/fulltext/S0168-9525(13)00089-9?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS0168952513000899%3Fshowall%3Dtrue"&gt;Eisenberg and Levanon (2013)&lt;/a&gt;. I downloaded the &lt;code&gt;HK_genes.txt&lt;/code&gt; supplementary file &lt;a href="https://www.tau.ac.il/~elieis/HKG/"&gt;here&lt;/a&gt; and placed it in the &lt;code&gt;data&lt;/code&gt; folder at my current work directory. I also wrote an auxiliary script named &lt;code&gt;hk_genes.R&lt;/code&gt; and placed it in the &lt;code&gt;src&lt;/code&gt; folder. Check below a representation of my current work directory, where &lt;code&gt;main_dea_edgeR.R&lt;/code&gt; contains the commands of this&amp;nbsp;demonstration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── data
│   ├── counts.RData
│   └── HK_genes.txt
├── output
├── src
│   ├── edgeR_setup.R
│   └── hk_genes.R
└── main_dea_edgeR.R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For now, I will use default values and indicate that the transcripts in the data frame are identified by &lt;span class="caps"&gt;ENSEMBL&lt;/span&gt; ids. Before running the function, I assign the output path string to the &lt;code&gt;out_path&lt;/code&gt; object, which I include in the function call. Note that I gave the name &lt;code&gt;prostate_cancer&lt;/code&gt; to identify the experiment, and it will also be the name of the sheet in the&amp;nbsp;spreadsheet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;out_path&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;prostate_cancer.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;edger_setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;prostate_cancer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gene_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ENSEMBL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function will organize the data into groups based on the sample labels I applied previously (&amp;#8220;case&amp;#8221; and &amp;#8220;control&amp;#8221;), filter out genes with negligible expression and calculate the expression metrics, such as the logarithm of the fold-change (logFC) and counts per million transcripts (logCPM), as well as fit a statistical generalized linear model (&lt;span class="caps"&gt;GLM&lt;/span&gt;), calculating &lt;span class="caps"&gt;GLM&lt;/span&gt; coefficients (&amp;beta;) for each gene. The &lt;span class="caps"&gt;DEA&lt;/span&gt; then consists in perform a hypothesis test (quasi-likelihood F-test in this case), to test the null hypothesis that the coefficients are equal (or that &amp;beta;&lt;sub&gt;&lt;em&gt;control&lt;/em&gt;&lt;/sub&gt; - &amp;beta;&lt;sub&gt;&lt;em&gt;case&lt;/em&gt;&lt;/sub&gt; = 0). From the F-test statistics is then derived a p-value, which is adjusted by false discovery rate (&lt;span class="caps"&gt;FDR&lt;/span&gt;) to account for multiple&amp;nbsp;comparisons.&lt;/p&gt;
&lt;p&gt;After a while, the function will generate a spreadsheet with the &lt;span class="caps"&gt;DEA&lt;/span&gt; results. See below an excerpt of the spreadsheet (&lt;em&gt;with commas as decimal separators&lt;/em&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="edgeR differential expression analysis in a prostate cancer dataset" src="https://antoniocampos13.github.io/images/prostate_cancer_edger_result.PNG"&gt;&lt;/p&gt;
&lt;h2&gt;Interpretation of the&amp;nbsp;results&lt;/h2&gt;
&lt;p&gt;Note that there are seven&amp;nbsp;columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; and &lt;code&gt;geneid&lt;/code&gt;: transcript&amp;nbsp;identifiers;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logfc&lt;/code&gt;: the base 2 logarithm of the &lt;strong&gt;fold-change&lt;/strong&gt; (logFC), which is how much a quantity changes between two measurements &amp;#8212; it is a ratio of two quantities. A logFC = 1 means that the expression of a certain gene was double in one condition than the other, a logFC = 2 means four-times higher expression, and so on. A logFC = -1 means half of the expression, a logFC = -2 means a quarter, and so&amp;nbsp;on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logcpm&lt;/code&gt;: the logarithm of the counts per million&amp;nbsp;transcripts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt;: the quasi-likelihood F-test&amp;nbsp;statistic.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pvalue&lt;/code&gt; and &lt;code&gt;adjpvalue&lt;/code&gt;: the quasi-likelihood F-test statistic raw and &lt;span class="caps"&gt;FDR&lt;/span&gt;-adjusted p-values,&amp;nbsp;respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the &lt;code&gt;logfc&lt;/code&gt; column is the expression in cases group relative to control group. The &lt;code&gt;edger_setup()&lt;/code&gt; custom function automatically organizes data to this&amp;nbsp;end.&lt;/p&gt;
&lt;p&gt;Usually, the researcher may want to further filter these results. For example, I like to consider not only the adjusted p-value, but also check which genes presented |logFC &amp;gt;= 1| (note the absolute value symbols here). Thus, if a gene passes these two criteria, I usually assume that it may have biological relevance for the disease/characteristic in&amp;nbsp;study.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I demonstrated a custom function that uses &lt;code&gt;edgeR&lt;/code&gt; package to perform differential expression analysis. Here is a summary of the requirements of the&amp;nbsp;function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A R data frame: rows are the transcripts, columns are the&amp;nbsp;samples;&lt;/li&gt;
&lt;li&gt;The samples must be labeled as &amp;#8220;case&amp;#8221; or &amp;#8220;control&amp;#8221; (in the column&amp;nbsp;names);&lt;/li&gt;
&lt;li&gt;The function outputs a spreadsheet with logFC and&amp;nbsp;p-values;&lt;/li&gt;
&lt;li&gt;The reported logFC are relative to the control group (control group is the&amp;nbsp;reference);&lt;/li&gt;
&lt;li&gt;The result spreadsheets can be filtered as the researcher&amp;nbsp;wishes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Subscribe to my &lt;a href="https://antoniocampos13.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;, &lt;a href="https://antoniocampos13.github.io/feeds/all.atom.xml"&gt;Atom feed&lt;/a&gt; or &lt;a href="https://t.me/joinchat/AAAAAEYrNCLK80Fh1w8nAg"&gt;Telegram channel&lt;/a&gt; to keep you updated whenever I post new&amp;nbsp;content.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.ebi.ac.uk/training/online/course/functional-genomics-ii-common-technologies-and-data-analysis-methods/differential-gene"&gt;Differential gene expression&amp;nbsp;analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/edgeR.html"&gt;edgeR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.biostars.org/p/284775/#284893"&gt;How do I explain the difference between edgeR, &lt;span class="caps"&gt;LIMMA&lt;/span&gt;, DESeq etc. to experimental&amp;nbsp;Biologist/non-bioinformatician&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/openxlsx/versions/4.2.2"&gt;openxlsx package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/BiocManager/versions/1.30.10"&gt;BiocManager package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bioconductor.org/"&gt;Bioconductor -&amp;nbsp;Home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bioconductor.org/packages/release/bioc/html/AnnotationDbi.html"&gt;AnnotationDbi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/annotate/versions/1.50.0"&gt;annotate package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html"&gt;org.Hs.eg.db&amp;nbsp;package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bioconductor.org/packages/release/data/annotation/html/EnsDb.Hsapiens.v79.html"&gt;EnsDb.Hsapiens.v79&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/ensembldb/versions/1.4.7"&gt;ensembldb package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/load"&gt;load function | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/source"&gt;source function | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/Class/MLACourse/Modules/Genes/sample_entrez_gene_record.html"&gt;Entrez Gene&amp;nbsp;Records&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ebi.ac.uk/training-beta/online/courses/ensembl-browsing-genomes/navigating-ensembl/investigating-a-gene/"&gt;Investigating a gene |&amp;nbsp;Ensembl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.genenames.org/"&gt;&lt;span class="caps"&gt;HUGO&lt;/span&gt; Gene Nomenclature&amp;nbsp;Committee&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.cell.com/trends/genetics/fulltext/S0168-9525(13)00089-9?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS0168952513000899%3Fshowall%3Dtrue"&gt;Human housekeeping genes,&amp;nbsp;revisited&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tau.ac.il/~elieis/HKG/"&gt;Human housekeeping genes, revisited - Supplementary&amp;nbsp;material&lt;/a&gt;&lt;/p&gt;</content><category term="R"></category><category term="Bioinformatics"></category><category term="gene expression"></category><category term="edgeR"></category></entry><entry><title>Data manipulation with R</title><link href="https://antoniocampos13.github.io/data-manipulation-with-r.html" rel="alternate"></link><published>2020-10-19T13:30:00-03:00</published><updated>2020-10-19T13:30:00-03:00</updated><author><name>Antonio Victor Campos Coelho</name></author><id>tag:antoniocampos13.github.io,2020-10-19:/data-manipulation-with-r.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="https://antoniocampos13.github.io/working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1.html#working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1"&gt;previous post&lt;/a&gt; I demonstrated how to obtain a prostate cancer dataset with genomic information in the form of gene expression quantification and created a local PostgreSQL database to hold the&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Here, I will use R to connect to the PostgreSQL database, retrieve and then prepare the …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In my &lt;a href="https://antoniocampos13.github.io/working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1.html#working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1"&gt;previous post&lt;/a&gt; I demonstrated how to obtain a prostate cancer dataset with genomic information in the form of gene expression quantification and created a local PostgreSQL database to hold the&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Here, I will use R to connect to the PostgreSQL database, retrieve and then prepare the &lt;span class="caps"&gt;CGC&lt;/span&gt; data to perform a Differential Expression Analysis for sequence count data in the &lt;span class="caps"&gt;CGC&lt;/span&gt; dataset. This demonstration is on a RStudio project running in Windows 10, but the same steps can be followed on an Unix&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;As always, the code demonstrated here is available on my &lt;a href="https://github.com/antoniocampos13/portfolio/tree/master/R/2020_10_19_Data_manipulation_with_R"&gt;portfolio on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting up .Renviron&amp;nbsp;file&lt;/h2&gt;
&lt;p&gt;In my working directory, I create a text file named &lt;code&gt;.Renviron&lt;/code&gt; to store the credentials of the PostgreSQL database with the following&amp;nbsp;information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;userid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;USER_NAME&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;PASSWORD&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code&gt;&amp;lt;USER_NAME&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;PASSWORD&amp;gt;&lt;/code&gt; with your credentials used to access the PostgreSQL database. Usually, the default username is &lt;code&gt;postgres&lt;/code&gt; and the password is defined during PostgreSQL&amp;nbsp;installation.&lt;/p&gt;
&lt;h2&gt;Install/Load&amp;nbsp;packages&lt;/h2&gt;
&lt;p&gt;Then I open a RStudio session and create a project in the folder containing the &lt;code&gt;.Renviron&lt;/code&gt; file. Now, I need to load the packages I will use today. You can install them using &lt;code&gt;install.packages()&lt;/code&gt; function if you do not have them installed&amp;nbsp;yet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Run only once&lt;/span&gt;
&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RPostgres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tidyverse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that to install more than one package at once we must use the concatenate &lt;code&gt;c()&lt;/code&gt; command to pass the packages names and they must be quoted and separated by commas &amp;#8212; a R &lt;em&gt;vector&lt;/em&gt;. The package dependencies will be installed as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Now I load the packages into the R&amp;nbsp;session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RPostgres&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tidyverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;RPostgres&lt;/code&gt; is needed to connect to the PostgreSQL database I created before. The &lt;a href="https://github.com/jennybc/here_here"&gt;&lt;code&gt;here&lt;/code&gt; package&lt;/a&gt; handles file paths. &lt;code&gt;tidyverse&lt;/code&gt; is a powerful collection of packages for data manipulation. By using it, it will actually load several other packages, such as &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;stringr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt;. It is one of the packages I use the most. Check &lt;code&gt;RPostgres&lt;/code&gt; documentation &lt;a href="https://www.rdocumentation.org/packages/RPostgres/versions/1.2.1"&gt;here&lt;/a&gt; and &lt;code&gt;tidyverse&lt;/code&gt; documentation &lt;a href="https://www.tidyverse.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Set up connection to tcga&amp;nbsp;database&lt;/h2&gt;
&lt;p&gt;I now set up the connection to the&amp;nbsp;database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;RPostgres&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Postgres&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="n"&gt;dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tcga&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Sys.getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Sys.getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Sys.getenv()&lt;/code&gt; will retrieve the information in the &lt;code&gt;.Renviron&lt;/code&gt; file. Remember to not share this file so your credentials remain secret. The connection credentials are now stored in the &lt;code&gt;con&lt;/code&gt; object.&lt;/p&gt;
&lt;h2&gt;Retrieve and pivot gene_counts_cases&amp;nbsp;table&lt;/h2&gt;
&lt;p&gt;With the command below, I retrieve the table containing the case-identified, raw gene counts I created last&amp;nbsp;time:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;dbGetQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT * FROM gene_counts_cases&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;dbGetQuery()&lt;/code&gt; is one of the functions from &lt;code&gt;DBI&lt;/code&gt; package, a dependency of &lt;code&gt;RPostgres&lt;/code&gt;. Check &lt;code&gt;DBI&lt;/code&gt; documentation &lt;a href="https://www.rdocumentation.org/packages/DBI/versions/0.5-1"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The information is now stored in the &lt;code&gt;cases&lt;/code&gt; object, which has three columns: &lt;code&gt;case_id&lt;/code&gt;, &lt;code&gt;gene_id&lt;/code&gt; and &lt;code&gt;gene_counts&lt;/code&gt;. Therefore, each row is a combination of a case, a gene and a gene count &amp;#8212; it is a &amp;#8220;long&amp;#8221;&amp;nbsp;format.&lt;/p&gt;
&lt;p&gt;I now will reformat the table to a &amp;#8220;wide&amp;#8221; format (pivot) because it is a requirement for the differential expression analysis. The pivoted table will have &lt;em&gt;G&lt;/em&gt;x&lt;em&gt;N&lt;/em&gt; dimensions, where &lt;em&gt;G&lt;/em&gt; are the number of rows (the number of gene transcripts quantified) and &lt;em&gt;N&lt;/em&gt; the number of columns (the number of&amp;nbsp;cases).&lt;/p&gt;
&lt;p&gt;I will use the &lt;code&gt;pivot_wider()&lt;/code&gt; function of the &lt;code&gt;tidyr&lt;/code&gt; package to do the job (&lt;strong&gt;&lt;span class="caps"&gt;WARNING&lt;/span&gt;: &lt;span class="caps"&gt;COMPUTATION&lt;/span&gt; &lt;span class="caps"&gt;INTENSIVE&lt;/span&gt; &lt;span class="caps"&gt;STEP&lt;/span&gt;&lt;/strong&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cases_pivoted&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;
  &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;pivot_wider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;names_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;case_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;values_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gene_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;values_fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;names_repair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;check_unique&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;values_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;cases_pivoted&lt;/code&gt; is the name of the object that will hold the pivoted table. The &lt;code&gt;%&amp;gt;%&lt;/code&gt; is &lt;code&gt;dplyr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s syntax. It means that we are piping the contents of &lt;code&gt;cases&lt;/code&gt; object into the &lt;code&gt;pivot_wider()&lt;/code&gt; function and its&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;names_from&lt;/code&gt; argument tells which column will be pivoted to generate new columns. The &lt;code&gt;values_from&lt;/code&gt; argument tells which column hold the values that will fill the new pivoted table. The &lt;code&gt;values_fill&lt;/code&gt; argument will substitute any missing data for a zero. The &lt;code&gt;names_repair&lt;/code&gt; argument checks that each new column has a unique name. Finally, the &lt;code&gt;values_fn&lt;/code&gt; argument indicates the function that must be applied to the values filling the new pivoted table. Note that I used the &lt;code&gt;mean&lt;/code&gt; function because during this step I noticed that some cases were associated with more than one gene expression quantification file. Therefore, I had to take the mean of these extra gene counts to correctly generate the pivoted&amp;nbsp;table.&lt;/p&gt;
&lt;p&gt;Since I calculated means for the values, I then rounded to the next integer all numerical data in the table with the help of &lt;code&gt;dplyr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;across()&lt;/code&gt; and &lt;code&gt;where()&lt;/code&gt; functions and &lt;code&gt;round()&lt;/code&gt;, which is one of R&amp;#8217;s standard (base)&amp;nbsp;functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;cases_pivoted&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;across&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;where(is.numeric)&lt;/code&gt; ensures that I only manipulated numeric data in the table. The &lt;code&gt;across()&lt;/code&gt; function applies the same transformation (rounding in this case) to multiple columns. Finally, &lt;code&gt;mutate()&lt;/code&gt; adds the new variables (rounded columns), replacing the existing&amp;nbsp;ones.&lt;/p&gt;
&lt;h2&gt;Retrieve and de-duplicate follow_up&amp;nbsp;table&lt;/h2&gt;
&lt;p&gt;Now I set aside the &lt;code&gt;counts&lt;/code&gt; table for a moment to prepare the sample classifications. I realized that the &lt;code&gt;follow_up&lt;/code&gt; table had duplicate data for some reason. Thus I connected to the database and de-duplicate the &lt;code&gt;followup_primarytherapyoutcomesuccess_1&lt;/code&gt; column by using string aggregation (PostgreSQL&amp;#8217;s &lt;a href="https://www.postgresqltutorial.com/postgresql-aggregate-functions/postgresql-string_agg-function/"&gt;&lt;code&gt;STRING_AGG&lt;/code&gt; function&lt;/a&gt;). I also changed its name to &lt;code&gt;outcome&lt;/code&gt; for simplicity, and saved the results as the &lt;code&gt;followup_dedup&lt;/code&gt; table. This is the command I&amp;nbsp;used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;dbExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;CREATE TABLE followup_dedup AS SELECT case_id, STRING_AGG(followup_primarytherapyoutcomesuccess_1, &amp;#39;,&amp;#39;) AS outcome FROM follow_up GROUP BY case_id&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how I used &lt;code&gt;DBI&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;dbExecute()&lt;/code&gt; instead of &lt;code&gt;dbGetQuery()&lt;/code&gt;, since I will not retrieve the table into the R&amp;nbsp;session.&lt;/p&gt;
&lt;p&gt;Now I create other table to link the cases &lt;span class="caps"&gt;ID&lt;/span&gt; numbers with the de-duplicated outcomes, saving the result as the &lt;code&gt;outcomes&lt;/code&gt; table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;dbExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;CREATE TABLE outcomes AS SELECT case_id, outcome FROM allcases INNER JOIN followup_dedup USING(case_id)&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I now retrieve the &lt;code&gt;outcomes&lt;/code&gt; table into the R&amp;nbsp;session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;dbGetQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT * FROM outcomes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Create sample classification and new&amp;nbsp;labels&lt;/h2&gt;
&lt;p&gt;I will now create a new column named &lt;code&gt;class&lt;/code&gt; in the outcomes table with a simplified case/control classification based on the &lt;code&gt;outcome&lt;/code&gt; column with the help of &lt;code&gt;dplyr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;case_when()&lt;/code&gt;, which vectorizes multiple if/else statements (it is an R equivalent of the &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;code&gt;CASE WHEN&lt;/code&gt; statement):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;case_when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nf"&gt;str_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;str_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Partial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;case&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nf"&gt;str_detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outcome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Disease&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;case&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I will create a new label for the cases for simplification. I created a column named &lt;code&gt;new_names&lt;/code&gt; in the &lt;code&gt;outcomes&lt;/code&gt; table. The new names were created by joining the classification created in the previous step with the 12 last characters of the &lt;code&gt;case_id&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;outcomes&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="nf"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, let&amp;#8217;s apply the new case labels, substituting the old ones with the help of &lt;code&gt;dplyr&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s &lt;code&gt;recode()&lt;/code&gt;  function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dplyr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;recode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;!!!&lt;/span&gt;&lt;span class="nf"&gt;setNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outcomes&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;new_names&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;outcomes&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;case_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Convert gene_ids into row names, then delete gene_id&amp;nbsp;column&lt;/h2&gt;
&lt;p&gt;The table is almost in the state required for differential expression analysis. I just need to convert the &lt;code&gt;gene_id&lt;/code&gt; column into row names of the data&amp;nbsp;frame:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;row.names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;gene_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;gene_id&lt;/code&gt; is not needed anymore. I can delete&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The data frame is now ready for differential expression analysis for sequence count data. The features (gene IDs) are embedded on the R object row names, whereas each column corresponds to a individual sample. The row/column intersection are therefore, the raw counts of gene&amp;nbsp;expression.&lt;/p&gt;
&lt;p&gt;Check the dimensions (&lt;em&gt;G&lt;/em&gt;x&lt;em&gt;N&lt;/em&gt;) of the data frame with the &lt;code&gt;dim()&lt;/code&gt; function and see that there 60483 rows and 236 columns, meaning that 60483 transcripts where quantified in samples obtained from 236 individuals with prostate&amp;nbsp;cancer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;60483&lt;/span&gt;   &lt;span class="m"&gt;236&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See below first few rows and columns of the finalized &lt;code&gt;counts&lt;/code&gt; data&amp;nbsp;frame:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Final gene counts table" src="https://antoniocampos13.github.io/images/counts_final.PNG"&gt;&lt;/p&gt;
&lt;p&gt;In a future post I will demonstrate the differential expression analysis &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I demonstrated how to connect to a local PostgreSQL database with &lt;code&gt;Rpostgres&lt;/code&gt; and &lt;code&gt;DBI&lt;/code&gt; packages;&lt;/li&gt;
&lt;li&gt;Reorganized data by pivoting a long data frame to a wider data frame with gene IDs in rows and samples in columns with &lt;code&gt;dplyr&lt;/code&gt; package&amp;nbsp;functions;&lt;/li&gt;
&lt;li&gt;Labeled columns as cases or controls for the differential expression analysis, also with &lt;code&gt;dplyr&lt;/code&gt; package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Go back to &lt;a href="https://antoniocampos13.github.io/working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1.html#working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-1"&gt;Working with Cancer Genomics Cloud datasets in a PostgreSQL database Part 1&lt;/a&gt; and &lt;a href="https://antoniocampos13.github.io/working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-2.html#working-with-cancer-genomics-cloud-datasets-in-a-postgresql-database-part-2"&gt;Part 2&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Subscribe to my &lt;a href="https://antoniocampos13.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;, &lt;a href="https://antoniocampos13.github.io/feeds/all.atom.xml"&gt;Atom feed&lt;/a&gt; or &lt;a href="https://t.me/joinchat/AAAAAEYrNCLK80Fh1w8nAg"&gt;Telegram channel&lt;/a&gt; to keep you updated whenever I post new&amp;nbsp;content.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/jennybc/here_here"&gt;Ode to the here&amp;nbsp;package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/RPostgres/versions/1.2.1"&gt;RPostgres package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tidyverse.org/"&gt;Tidyverse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/DBI/versions/0.5-1"&gt;&lt;span class="caps"&gt;DBI&lt;/span&gt; package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.postgresqltutorial.com/postgresql-aggregate-functions/postgresql-string_agg-function/"&gt;PostgreSQL STRING_AGG() Function By Practical&amp;nbsp;Examples&lt;/a&gt;&lt;/p&gt;</content><category term="R"></category><category term="Bioinformatics"></category><category term="gene expression"></category><category term="SQL"></category><category term="PostgreSQL"></category></entry><entry><title>Meta-analysis and Meta-regression with R</title><link href="https://antoniocampos13.github.io/meta-analysis-and-meta-regression-with-r.html" rel="alternate"></link><published>2020-10-13T14:00:00-03:00</published><updated>2020-10-13T14:00:00-03:00</updated><author><name>Antonio Victor Campos Coelho</name></author><id>tag:antoniocampos13.github.io,2020-10-13:/meta-analysis-and-meta-regression-with-r.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;On December 2019, reports from severe acute respiratory syndrome in Wuhan, China, were linked to a novel coronavirus, now known as &lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2, and the disease it causes was termed coronavirus disease 2019 (&lt;span class="caps"&gt;COVID&lt;/span&gt;-19).&lt;/p&gt;
&lt;p&gt;The World Health Organization declared the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 outbreak a Public Health Emergency of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;On December 2019, reports from severe acute respiratory syndrome in Wuhan, China, were linked to a novel coronavirus, now known as &lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2, and the disease it causes was termed coronavirus disease 2019 (&lt;span class="caps"&gt;COVID&lt;/span&gt;-19).&lt;/p&gt;
&lt;p&gt;The World Health Organization declared the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 outbreak a Public Health Emergency of International Concern on 30 January 2020, and a pandemic on 11 March&amp;nbsp;2020.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2 causes an interstitial and alveolar pneumonia, but in nearly 26% of patients it can lead to a severe disease, with multiple organ failure (references: &lt;a href="https://www.bmj.com/content/369/bmj.m1985"&gt;1&lt;/a&gt;, &lt;a href="https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2763184"&gt;2&lt;/a&gt;, &lt;a href="https://linkinghub.elsevier.com/retrieve/pii/S0140673620311892"&gt;3&lt;/a&gt;, &lt;a href="https://linkinghub.elsevier.com/retrieve/pii/S0163445320301705"&gt;4&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Thus, infection by &lt;span class="caps"&gt;SARS&lt;/span&gt;-CoV-2 can cause kidney injury, perhaps by direct impact of  virulence, or via other renal insults such as volume depletion, hypoxia and cytokine storm. This has posed pressure to healthcare systems due to a shortage of dialysis staff, equipment and consumables throughout the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;I recently &lt;a href="https://jcp.bmj.com/content/early/2020/10/06/jclinpath-2020-207023.long"&gt;co-authored an article&lt;/a&gt; regarding acute kidney injury (&lt;span class="caps"&gt;AKI&lt;/span&gt;) among patients infected with &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 patients. The objective of the study was to systematically review the incidence of &lt;span class="caps"&gt;COVID&lt;/span&gt;-19-associated &lt;span class="caps"&gt;AKI&lt;/span&gt;, its related risks factors, need for renal replacement therapy (&lt;span class="caps"&gt;RRT&lt;/span&gt;) among patients with &lt;span class="caps"&gt;AKI&lt;/span&gt; and mortality according to current illness&amp;nbsp;severity.&lt;/p&gt;
&lt;p&gt;In this post I will show the code I used to meta-analyze the &lt;span class="caps"&gt;AKI&lt;/span&gt; incidence data among &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 patients. As usual, the codes presented here are available on the corresponding folder on my &lt;a href="https://github.com/antoniocampos13/portfolio/tree/master/R/2020_10_13_Meta-analysis_with_R"&gt;GitHub portfolio&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;h3&gt;Systematic Review&amp;nbsp;methodology&lt;/h3&gt;
&lt;p&gt;My colleagues systematically searched PubMed, &lt;span class="caps"&gt;SCOPUS&lt;/span&gt; and Web of Science databases with the search terms &amp;#8220;&lt;span class="caps"&gt;COVID&lt;/span&gt;-19&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;&lt;span class="caps"&gt;SARS&lt;/span&gt;- CoV-2&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;Coronavirus 2019&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;2019- nCoV&amp;#8221; &lt;span class="caps"&gt;AND&lt;/span&gt; &amp;#8220;Acute Kidney Injury&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;Kidney&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;Nephrology&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;Renal Disease&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;Clinical Characteristics&amp;#8221; &lt;span class="caps"&gt;OR&lt;/span&gt; &amp;#8220;Clinical&amp;nbsp;Features&amp;#8221;.&lt;/p&gt;
&lt;h3&gt;Meta-analysis and&amp;nbsp;meta-regression&lt;/h3&gt;
&lt;p&gt;The heterogeneity between studies sample sizes was expressed through I&lt;sup&gt;2&lt;/sup&gt; measure and &amp;tau;&lt;sup&gt;2&lt;/sup&gt; statistic (estimated via maximum- likelihood). A Cochran&amp;#8221;s Q test with k–1 df (in which k is the number of studies included) and with significance level &amp;alpha;=0.10 (exclusively for this test) was conducted to assess if heterogeneity was significantly different from zero. If so, the heterogeneity was classified according to the observed I&lt;sup&gt;2&lt;/sup&gt; measure: ≤25%, between 25% and 50%, between 50% and 75% and between 75% and 100% were considered as low, moderate, high and very high heterogeneity, respectively. In case of significant heterogeneity, the meta-analyses were conducted assuming a random- effects model with the Hartung-Knapp adjustment (References: &lt;a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.791"&gt;6&lt;/a&gt;, &lt;a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.1009"&gt;7&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The independent variables included in a multivariate meta-regression were: study location (China, Poland or the &lt;span class="caps"&gt;USA&lt;/span&gt;), study design (case series, prospective or retrospective cohorts), study setting (single or multicenter), &lt;span class="caps"&gt;AKI&lt;/span&gt; definition criteria, median age of patients in years, proportion of males patients in the sample size and proportion of patients with certain comorbidities, namely hypertension, other cardio-vascular diseases, diabetes, chronic pulmonary disease, chronic kidney disease (&lt;span class="caps"&gt;CKD&lt;/span&gt;) and&amp;nbsp;cancer.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;h3&gt;Results of the systematic&amp;nbsp;review&lt;/h3&gt;
&lt;p&gt;My colleagues found 21 studies and I was responsible for perform the meta-analysis. Overall, 15,536 patients with &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 was the total sample size. Most studies (18) were from China, two were from the &lt;span class="caps"&gt;USA&lt;/span&gt; and one from&amp;nbsp;Poland.&lt;/p&gt;
&lt;h3&gt;Incidence of &lt;span class="caps"&gt;AKI&lt;/span&gt; among patients with &lt;span class="caps"&gt;COVID&lt;/span&gt;-19&lt;/h3&gt;
&lt;p&gt;The meta-analysis showed an incidence of &lt;span class="caps"&gt;AKI&lt;/span&gt; associated with &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 of 12.3% (95% &lt;span class="caps"&gt;CI&lt;/span&gt;=7.3% to 20.0%; Cochran’s Q=839.6 with 20 degrees of freedom, p&amp;lt;0.001; I&lt;sup&gt;2&lt;/sup&gt; = 97.6% and &amp;tau;&lt;sup&gt;2&lt;/sup&gt; =&amp;nbsp;1.42).&lt;/p&gt;
&lt;p&gt;Below I show the code that generated this&amp;nbsp;result.&lt;/p&gt;
&lt;h4&gt;Loading&amp;nbsp;packages&lt;/h4&gt;
&lt;p&gt;I used R software with &lt;a href="https://rstudio.com/"&gt;RStudio&lt;/a&gt; in Windows 10 to perform the meta-analysis (the same steps can be followed in Unix systems). I opened a R session through RStudio, &lt;a href="https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects"&gt;created a project&lt;/a&gt;, named it &lt;code&gt;aki_demo&lt;/code&gt; and loaded all packages needed for the meta-analysis. The command to install them&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Run only once, if you do not have the packages installed yet&lt;/span&gt;
&lt;span class="nf"&gt;install.packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;openxlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The packages and their dependencies will be downloaded from the internet and installed. After install, I must load them in the R&amp;nbsp;session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openxlsx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Load and inspect&amp;nbsp;data&lt;/h4&gt;
&lt;p&gt;Now I can load the data. I prepared an Excel spreadsheet with an excerpt of the data of our paper and put inside a subfolder named &lt;code&gt;data&lt;/code&gt; on my working directory. The current script I saved on a folder named &lt;code&gt;src&lt;/code&gt; (for &amp;#8220;source&amp;#8221;). My project folder now look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── data
│   └── aki_demo.xlsx
├── output
├── src
│   └── aki_demo.R
├── .Rhistory
└── aki_demo.RProj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I load the spreadsheet into the R session memory with the&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;aki&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;read.xlsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aki_demo.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;-&lt;/code&gt;, which is simply the &amp;#8220;less than&amp;#8221; &lt;code&gt;&amp;lt;&lt;/code&gt; symbol followed by a dash symbol &lt;code&gt;-&lt;/code&gt;, means &amp;#8220;assigning&amp;#8221;. I am assigning the data to the object named &lt;code&gt;aki&lt;/code&gt;. The &lt;code&gt;read.xlsx()&lt;/code&gt; function from &lt;code&gt;openxlsx&lt;/code&gt; package reads the content of the spreadsheet and loads into a &lt;strong&gt;data frame&lt;/strong&gt;, a tabular R format that holds&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Note the usage of the &lt;code&gt;here()&lt;/code&gt; function. &lt;code&gt;here&lt;/code&gt; is a nice R package that helps file paths management. It ensures that my code will run smoothly on any computer, provided the directory structure is maintained. Thus, there is no need to hardcode file paths, improving code portability/reproducibility. The &lt;a href="https://github.com/jennybc/here_here"&gt;Dr. Jennifer Bryan&amp;#8217;s post&lt;/a&gt; is a nice introduction to the &lt;code&gt;here&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;To see the contents of the spreadsheet, type &lt;code&gt;aki&lt;/code&gt; in the RStudio console window (bottom left area of RStudio window) and press Enter/Return or select the or put the cursor at the start of the line in the script window (top left) and press &lt;code&gt;CTRL + Enter&lt;/code&gt; (&lt;code&gt;⌘ Command + Enter&lt;/code&gt; on&amp;nbsp;MacOS).&lt;/p&gt;
&lt;p&gt;&lt;img alt="RStudio Script and Console windows" src="https://antoniocampos13.github.io/images/RStudio_console.PNG"&gt;&lt;/p&gt;
&lt;p&gt;The first five columns of the output are below (I manually omitted the remaining of the&amp;nbsp;table):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aki&lt;/span&gt;
                          &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;sample_size&lt;/span&gt; &lt;span class="n"&gt;control_aki&lt;/span&gt; &lt;span class="n"&gt;case_aki&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="n"&gt;Tao&lt;/span&gt; &lt;span class="n"&gt;Chen&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;274&lt;/span&gt;         &lt;span class="m"&gt;245&lt;/span&gt;       &lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;            &lt;span class="n"&gt;W.&lt;/span&gt; &lt;span class="n"&gt;Guan&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;        &lt;span class="m"&gt;1099&lt;/span&gt;        &lt;span class="m"&gt;1093&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;        &lt;span class="n"&gt;Xiaobo&lt;/span&gt; &lt;span class="n"&gt;Yang&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;          &lt;span class="m"&gt;52&lt;/span&gt;          &lt;span class="m"&gt;37&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;           &lt;span class="n"&gt;Fei&lt;/span&gt; &lt;span class="n"&gt;Zhou&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;191&lt;/span&gt;         &lt;span class="m"&gt;163&lt;/span&gt;       &lt;span class="m"&gt;28&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;        &lt;span class="n"&gt;Yingzhen&lt;/span&gt; &lt;span class="n"&gt;Du&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;          &lt;span class="m"&gt;85&lt;/span&gt;          &lt;span class="m"&gt;37&lt;/span&gt;       &lt;span class="m"&gt;48&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;      &lt;span class="n"&gt;Chaolin&lt;/span&gt; &lt;span class="n"&gt;Huang&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;          &lt;span class="m"&gt;41&lt;/span&gt;          &lt;span class="m"&gt;38&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;7&lt;/span&gt;       &lt;span class="n"&gt;Qingxian&lt;/span&gt; &lt;span class="n"&gt;Cai&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;298&lt;/span&gt;         &lt;span class="m"&gt;281&lt;/span&gt;       &lt;span class="m"&gt;17&lt;/span&gt;
&lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="n"&gt;Yichun&lt;/span&gt; &lt;span class="n"&gt;Cheng&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;701&lt;/span&gt;         &lt;span class="m"&gt;665&lt;/span&gt;       &lt;span class="m"&gt;36&lt;/span&gt;
&lt;span class="m"&gt;9&lt;/span&gt;       &lt;span class="n"&gt;Shaoqing&lt;/span&gt; &lt;span class="n"&gt;Lei&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;          &lt;span class="m"&gt;34&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;        &lt;span class="n"&gt;Dawei&lt;/span&gt; &lt;span class="n"&gt;Wang&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;138&lt;/span&gt;         &lt;span class="m"&gt;133&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;11&lt;/span&gt;         &lt;span class="n"&gt;Lang&lt;/span&gt; &lt;span class="n"&gt;Wang&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;339&lt;/span&gt;         &lt;span class="m"&gt;312&lt;/span&gt;       &lt;span class="m"&gt;27&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;   &lt;span class="n"&gt;Jamie&lt;/span&gt; &lt;span class="n"&gt;S.&lt;/span&gt; &lt;span class="n"&gt;Hirsch&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;      &lt;span class="n"&gt;USA&lt;/span&gt;        &lt;span class="m"&gt;5449&lt;/span&gt;        &lt;span class="m"&gt;3456&lt;/span&gt;     &lt;span class="m"&gt;1993&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;      &lt;span class="n"&gt;Blazej&lt;/span&gt; &lt;span class="n"&gt;Nowak&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;   &lt;span class="n"&gt;Poland&lt;/span&gt;         &lt;span class="m"&gt;169&lt;/span&gt;         &lt;span class="m"&gt;152&lt;/span&gt;       &lt;span class="m"&gt;17&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;          &lt;span class="n"&gt;Yi&lt;/span&gt; &lt;span class="n"&gt;Zheng&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;          &lt;span class="m"&gt;34&lt;/span&gt;          &lt;span class="m"&gt;27&lt;/span&gt;        &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="m"&gt;15&lt;/span&gt;         &lt;span class="n"&gt;Dawei&lt;/span&gt; &lt;span class="n"&gt;Wang&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;107&lt;/span&gt;          &lt;span class="m"&gt;93&lt;/span&gt;       &lt;span class="m"&gt;14&lt;/span&gt;
&lt;span class="m"&gt;16&lt;/span&gt;           &lt;span class="n"&gt;Yuan&lt;/span&gt; &lt;span class="n"&gt;Yu&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;226&lt;/span&gt;         &lt;span class="m"&gt;169&lt;/span&gt;       &lt;span class="m"&gt;57&lt;/span&gt;
&lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="n"&gt;Safiya&lt;/span&gt; &lt;span class="n"&gt;Richardson&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;      &lt;span class="n"&gt;USA&lt;/span&gt;        &lt;span class="m"&gt;5700&lt;/span&gt;        &lt;span class="m"&gt;4330&lt;/span&gt;     &lt;span class="m"&gt;1370&lt;/span&gt;
&lt;span class="m"&gt;18&lt;/span&gt;    &lt;span class="n"&gt;Guangchang&lt;/span&gt; &lt;span class="n"&gt;Pei&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;333&lt;/span&gt;         &lt;span class="m"&gt;298&lt;/span&gt;       &lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="m"&gt;19&lt;/span&gt;         &lt;span class="n"&gt;Yanlei&lt;/span&gt; &lt;span class="n"&gt;Li&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;          &lt;span class="m"&gt;54&lt;/span&gt;          &lt;span class="m"&gt;25&lt;/span&gt;       &lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="m"&gt;20&lt;/span&gt;      &lt;span class="n"&gt;Qingchun&lt;/span&gt; &lt;span class="n"&gt;Yao&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;108&lt;/span&gt;          &lt;span class="m"&gt;92&lt;/span&gt;       &lt;span class="m"&gt;16&lt;/span&gt;
&lt;span class="m"&gt;21&lt;/span&gt;     &lt;span class="n"&gt;Chengfeng&lt;/span&gt; &lt;span class="n"&gt;Qiu&lt;/span&gt; &lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;al.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2020&lt;/span&gt;    &lt;span class="n"&gt;China&lt;/span&gt;         &lt;span class="m"&gt;104&lt;/span&gt;         &lt;span class="m"&gt;102&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check that are 21 studies (rows) and the first five columns are: &lt;code&gt;authors&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;sample_size&lt;/code&gt; (the number of &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 patients), &lt;code&gt;control_aki&lt;/code&gt; (the number of &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 patients without &lt;span class="caps"&gt;AKI&lt;/span&gt;) and &lt;code&gt;case_aki&lt;/code&gt; (the number of &lt;span class="caps"&gt;AKI&lt;/span&gt; cases among the &lt;span class="caps"&gt;COVID&lt;/span&gt;-19&amp;nbsp;patients).&lt;/p&gt;
&lt;p&gt;To check the name of the other columns,&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;authors&amp;quot;&lt;/span&gt;        &lt;span class="s"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;       &lt;span class="s"&gt;&amp;quot;sample_size&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;control_aki&amp;quot;&lt;/span&gt;   
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;case_aki&amp;quot;&lt;/span&gt;       &lt;span class="s"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;            &lt;span class="s"&gt;&amp;quot;design&amp;quot;&lt;/span&gt;         &lt;span class="s"&gt;&amp;quot;setting&amp;quot;&lt;/span&gt;       
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;aki_criteria&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;males_p&amp;quot;&lt;/span&gt;        &lt;span class="s"&gt;&amp;quot;hypertension_p&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;all_cardio_p&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;diabetes_p&amp;quot;&lt;/span&gt;     &lt;span class="s"&gt;&amp;quot;copd_p&amp;quot;&lt;/span&gt;         &lt;span class="s"&gt;&amp;quot;ckd_p&amp;quot;&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;cancer_p&amp;quot;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, it is possible to see that there are 16 columns in total. The bracketed number in the left side of the line is the index of the first element in the line (the count starts with &lt;code&gt;[1] authors&lt;/code&gt;; the fourth element is &lt;code&gt;[5] case_aki&lt;/code&gt; column, and so&amp;nbsp;on).&lt;/p&gt;
&lt;p&gt;To check the shape (dimensions) of the table I&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;dim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output tells that there are 21 rows and 16 columns&amp;nbsp;indeed.&lt;/p&gt;
&lt;h4&gt;Calculating meta-analysis and inspecting&amp;nbsp;results&lt;/h4&gt;
&lt;p&gt;Now I will use the &lt;code&gt;metaprop()&lt;/code&gt; function from &lt;code&gt;meta&lt;/code&gt; package to calculate the pooled incidence (a &lt;strong&gt;proportion&lt;/strong&gt;) of &lt;span class="caps"&gt;AKI&lt;/span&gt; among &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 patients and assign the results to &lt;code&gt;aki_incidence_meta&lt;/code&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;aki_incidence_meta&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;metaprop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;case_aki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# numerator&lt;/span&gt;
                   &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sample_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# denominator&lt;/span&gt;
                   &lt;span class="n"&gt;studlab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# makes label by joining authors and location&lt;/span&gt;
                   &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# dataframe name&lt;/span&gt;
                   &lt;span class="n"&gt;sm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PLO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# pooling calculation method&lt;/span&gt;
                   &lt;span class="n"&gt;predict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# provides prediction confidence interval&lt;/span&gt;
                   &lt;span class="n"&gt;hakn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Hartung-Knapp correction&lt;/span&gt;
                   &lt;span class="n"&gt;comb.fixed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# displays fixed-effect results&lt;/span&gt;
                   &lt;span class="n"&gt;comb.random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# displays random-effect results&lt;/span&gt;
                   &lt;span class="n"&gt;level.comb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# confidence interval&lt;/span&gt;
                   &lt;span class="n"&gt;method.tau&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# heterogeneity calculation method&lt;/span&gt;
                   &lt;span class="n"&gt;method.bias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;linreg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;warn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that I type the command in this &amp;#8220;list&amp;#8221; format to allow easier reading of the code, it is not mandatory. The &lt;code&gt;event&lt;/code&gt; argument is the numerator (thus &lt;code&gt;aki_case&lt;/code&gt; column) and &lt;code&gt;n&lt;/code&gt; is the denominator (&lt;code&gt;sample_size&lt;/code&gt; column). I summarized above what the principal arguments do. Check &lt;code&gt;metaprop()&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s documentation page &lt;a href="https://www.rdocumentation.org/packages/meta/versions/4.9-6/topics/metaprop"&gt;here&lt;/a&gt; for more details. The &lt;code&gt;meta&lt;/code&gt; package has other functions to perform meta-analysis with other kind of data. Check the documentation &lt;a href="https://www.rdocumentation.org/packages/meta/versions/4.9-6"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Retrieving a summary of the &lt;code&gt;aki_incidence_meta&lt;/code&gt; object produces this&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Command&lt;/span&gt;
&lt;span class="nf"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki_incidence_meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;studies&lt;/span&gt; &lt;span class="n"&gt;combined&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;

                     &lt;span class="n"&gt;proportion&lt;/span&gt;           &lt;span class="m"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%-CI&lt;/span&gt;
&lt;span class="o"&gt;Fixed effect model       0.2801 [0.2724; 0.2879]&lt;/span&gt;
&lt;span class="o"&gt;Random effects model     0.1227 [0.0725; 0.2003]&lt;/span&gt;
&lt;span class="o"&gt;Prediction interval             [0.0107; 0.6451]&lt;/span&gt;

&lt;span class="o"&gt;Quantifying heterogeneity:&lt;/span&gt;
&lt;span class="o"&gt; tau^2 = 1.4231 [0.8378; 3.3344]; tau = 1.1929 [0.9153; 1.8260];&lt;/span&gt;
&lt;span class="o"&gt; I^2 = 97.6%&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;97.1&lt;/span&gt;&lt;span class="o"&gt;%; 98.1%&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6.48&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5.83&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;7.20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;heterogeneity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="n"&gt;d.f.&lt;/span&gt;  &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
 &lt;span class="m"&gt;839.62&lt;/span&gt;   &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0.0001&lt;/span&gt;

&lt;span class="n"&gt;Details&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;analytical&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Inverse&lt;/span&gt; &lt;span class="n"&gt;variance&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Maximum&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;likelihood&lt;/span&gt; &lt;span class="n"&gt;estimator&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;confidence&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Hartung&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Knapp&lt;/span&gt; &lt;span class="n"&gt;adjustment&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Logit&lt;/span&gt; &lt;span class="n"&gt;transformation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since there was high heterogeneity, I chose to interpret the results through a random-effects model, yielding the numbers I quoted above. Below the results are the heterogeneity reports, results of Cochran&amp;#8217;s Q test statistic, degrees-of-freedom and p-value confirming that the heterogeneity is not negligible and a summary of statistical methods used in the&amp;nbsp;meta-analysis.&lt;/p&gt;
&lt;p&gt;If you want to save this output directly to file, you could use the &lt;code&gt;sink()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;aki_incidence.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nf"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki_incidence_meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will save the raw output in text format in a file named &lt;code&gt;aki_incidence.txt&lt;/code&gt; into the &lt;code&gt;output&lt;/code&gt; folder.&lt;/p&gt;
&lt;h4&gt;Producing a Forest&amp;nbsp;plot&lt;/h4&gt;
&lt;p&gt;Now I will generate a Forest plot with &lt;code&gt;forest()&lt;/code&gt; function (also from &lt;code&gt;meta&lt;/code&gt; package) to visually represent the meta-analysis results and save it to a &lt;code&gt;TIFF&lt;/code&gt; file.  The commands below open the &lt;code&gt;TIFF&lt;/code&gt; graphical device, produce the plot and then closes the&amp;nbsp;device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Open the image device&lt;/span&gt;
&lt;span class="nf"&gt;tiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;here&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;plots&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;aki_incidence.tiff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lzw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3050&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1750&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Produce the plot&lt;/span&gt;
&lt;span class="nf"&gt;forest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki_incidence_meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;xlim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# set axis limits&lt;/span&gt;
             &lt;span class="n"&gt;comb.fixed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# omit fixed-effect model results&lt;/span&gt;
             &lt;span class="n"&gt;leftlabs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Study, Location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AKI cases&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sample size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# set left-side column names&lt;/span&gt;
             &lt;span class="n"&gt;rightlabs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AKI incidence&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;95% CI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Weight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;# set right-side column names&lt;/span&gt;
             &lt;span class="n"&gt;pooled.events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;col.predict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Close the device and save the plot&lt;/span&gt;
&lt;span class="nf"&gt;dev.off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check other R graphical devices commonly used to save plots as images &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/png.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Calculating a&amp;nbsp;meta-regression&lt;/h4&gt;
&lt;p&gt;To calculate the meta-analysis, I needed just the sample size and number of events. I can use the remaining variables in the data frame to calculate a meta-regression to assess if aggregate measures of patients characteristics would be associated with increased risk of &lt;span class="caps"&gt;AKI&lt;/span&gt; occurrence. Below is the command I&amp;nbsp;used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;aki_incidence_metareg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;metareg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki_incidence_meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;design&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;males_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;aki_criteria&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;hypertension_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;all_cardio_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;diabetes_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;copd_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ckd_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cancer_p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I used the &lt;code&gt;aki_incidence_meta&lt;/code&gt; meta-analysis object as input to the &lt;code&gt;metareg&lt;/code&gt; function. After a comma, I write a tilde &lt;code&gt;~&lt;/code&gt; and the list all covariates separated by plus signs &lt;code&gt;+&lt;/code&gt;. In R notation, the tilde separates the dependent covariate from the independent variables. Remember they are all columns from the spreadsheet I imported in the beginning. I check the results using the &lt;code&gt;summary()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aki_incidence_metareg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output:&lt;/span&gt;
&lt;span class="n"&gt;Mixed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Effects&lt;/span&gt; &lt;span class="nf"&gt;Model &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;estimator&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;logLik&lt;/span&gt;  &lt;span class="n"&gt;deviance&lt;/span&gt;       &lt;span class="n"&gt;AIC&lt;/span&gt;       &lt;span class="n"&gt;BIC&lt;/span&gt;      &lt;span class="n"&gt;AICc&lt;/span&gt; 
&lt;span class="m"&gt;-20.3487&lt;/span&gt;   &lt;span class="m"&gt;62.5815&lt;/span&gt;   &lt;span class="m"&gt;76.6975&lt;/span&gt;   &lt;span class="m"&gt;95.4989&lt;/span&gt;  &lt;span class="m"&gt;418.6975&lt;/span&gt;   

&lt;span class="n"&gt;tau&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;estimated&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;residual&lt;/span&gt; &lt;span class="n"&gt;heterogeneity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="m"&gt;0.2864&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.1130&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;tau &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;estimated&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;             &lt;span class="m"&gt;0.5352&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;residual&lt;/span&gt; &lt;span class="n"&gt;heterogeneity&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;unaccounted&lt;/span&gt; &lt;span class="n"&gt;variability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;77.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="o"&gt;H^2 (unaccounted variability / sampling variability):   4.35&lt;/span&gt;
&lt;span class="o"&gt;R^2 (amount of heterogeneity accounted for):            79.88%&lt;/span&gt;

&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Residual&lt;/span&gt; &lt;span class="n"&gt;Heterogeneity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nf"&gt;QE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;90.3774&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0001&lt;/span&gt;

&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nf"&gt;Moderators &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coefficients&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nf"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.6824&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.7411&lt;/span&gt;

&lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

                                     &lt;span class="n"&gt;estimate&lt;/span&gt;       &lt;span class="n"&gt;se&lt;/span&gt;     &lt;span class="n"&gt;tval&lt;/span&gt;    &lt;span class="n"&gt;pval&lt;/span&gt;      &lt;span class="n"&gt;ci.lb&lt;/span&gt;     &lt;span class="n"&gt;ci.ub&lt;/span&gt; 
&lt;span class="n"&gt;intrcpt&lt;/span&gt;                               &lt;span class="m"&gt;-7.1298&lt;/span&gt;   &lt;span class="m"&gt;7.4538&lt;/span&gt;  &lt;span class="m"&gt;-0.9565&lt;/span&gt;  &lt;span class="m"&gt;0.3930&lt;/span&gt;   &lt;span class="m"&gt;-27.8250&lt;/span&gt;   &lt;span class="m"&gt;13.5654&lt;/span&gt;    
&lt;span class="n"&gt;designprospective&lt;/span&gt;                      &lt;span class="m"&gt;3.9234&lt;/span&gt;   &lt;span class="m"&gt;4.6568&lt;/span&gt;   &lt;span class="m"&gt;0.8425&lt;/span&gt;  &lt;span class="m"&gt;0.4469&lt;/span&gt;    &lt;span class="m"&gt;-9.0058&lt;/span&gt;   &lt;span class="m"&gt;16.8527&lt;/span&gt;    
&lt;span class="n"&gt;designretrospective&lt;/span&gt;                    &lt;span class="m"&gt;4.8177&lt;/span&gt;   &lt;span class="m"&gt;4.3793&lt;/span&gt;   &lt;span class="m"&gt;1.1001&lt;/span&gt;  &lt;span class="m"&gt;0.3330&lt;/span&gt;    &lt;span class="m"&gt;-7.3411&lt;/span&gt;   &lt;span class="m"&gt;16.9764&lt;/span&gt;    
&lt;span class="n"&gt;settingsingle_center&lt;/span&gt;                  &lt;span class="m"&gt;-0.0597&lt;/span&gt;   &lt;span class="m"&gt;1.0959&lt;/span&gt;  &lt;span class="m"&gt;-0.0544&lt;/span&gt;  &lt;span class="m"&gt;0.9592&lt;/span&gt;    &lt;span class="m"&gt;-3.1023&lt;/span&gt;    &lt;span class="m"&gt;2.9830&lt;/span&gt;    
&lt;span class="n"&gt;locationPoland&lt;/span&gt;                        &lt;span class="m"&gt;-0.7740&lt;/span&gt;   &lt;span class="m"&gt;1.7608&lt;/span&gt;  &lt;span class="m"&gt;-0.4396&lt;/span&gt;  &lt;span class="m"&gt;0.6829&lt;/span&gt;    &lt;span class="m"&gt;-5.6628&lt;/span&gt;    &lt;span class="m"&gt;4.1147&lt;/span&gt;    
&lt;span class="n"&gt;locationUSA&lt;/span&gt;                            &lt;span class="m"&gt;1.5444&lt;/span&gt;   &lt;span class="m"&gt;2.4229&lt;/span&gt;   &lt;span class="m"&gt;0.6374&lt;/span&gt;  &lt;span class="m"&gt;0.5585&lt;/span&gt;    &lt;span class="m"&gt;-5.1826&lt;/span&gt;    &lt;span class="m"&gt;8.2714&lt;/span&gt;    
&lt;span class="n"&gt;age&lt;/span&gt;                                    &lt;span class="m"&gt;0.1119&lt;/span&gt;   &lt;span class="m"&gt;0.1032&lt;/span&gt;   &lt;span class="m"&gt;1.0844&lt;/span&gt;  &lt;span class="m"&gt;0.3392&lt;/span&gt;    &lt;span class="m"&gt;-0.1747&lt;/span&gt;    &lt;span class="m"&gt;0.3985&lt;/span&gt;    
&lt;span class="n"&gt;males_p&lt;/span&gt;                               &lt;span class="m"&gt;-5.7066&lt;/span&gt;   &lt;span class="m"&gt;8.9694&lt;/span&gt;  &lt;span class="m"&gt;-0.6362&lt;/span&gt;  &lt;span class="m"&gt;0.5592&lt;/span&gt;   &lt;span class="m"&gt;-30.6097&lt;/span&gt;   &lt;span class="m"&gt;19.1964&lt;/span&gt;    
&lt;span class="n"&gt;aki_criteriaKDIGO&lt;/span&gt;                     &lt;span class="m"&gt;-3.4725&lt;/span&gt;   &lt;span class="m"&gt;2.6281&lt;/span&gt;  &lt;span class="m"&gt;-1.3213&lt;/span&gt;  &lt;span class="m"&gt;0.2569&lt;/span&gt;   &lt;span class="m"&gt;-10.7691&lt;/span&gt;    &lt;span class="m"&gt;3.8242&lt;/span&gt;    
&lt;span class="n"&gt;aki_criteriaKDIGO&lt;/span&gt; &lt;span class="n"&gt;Expanded&lt;/span&gt; &lt;span class="n"&gt;Criteria&lt;/span&gt;   &lt;span class="m"&gt;-5.6275&lt;/span&gt;   &lt;span class="m"&gt;4.2522&lt;/span&gt;  &lt;span class="m"&gt;-1.3235&lt;/span&gt;  &lt;span class="m"&gt;0.2563&lt;/span&gt;   &lt;span class="m"&gt;-17.4334&lt;/span&gt;    &lt;span class="m"&gt;6.1783&lt;/span&gt;    
&lt;span class="n"&gt;aki_criteriaSerum&lt;/span&gt; &lt;span class="nf"&gt;creatinine &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Scr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="m"&gt;-1.5829&lt;/span&gt;   &lt;span class="m"&gt;3.9282&lt;/span&gt;  &lt;span class="m"&gt;-0.4030&lt;/span&gt;  &lt;span class="m"&gt;0.7076&lt;/span&gt;   &lt;span class="m"&gt;-12.4894&lt;/span&gt;    &lt;span class="m"&gt;9.3236&lt;/span&gt;    
&lt;span class="n"&gt;hypertension_p&lt;/span&gt;                       &lt;span class="m"&gt;-12.7624&lt;/span&gt;  &lt;span class="m"&gt;10.2703&lt;/span&gt;  &lt;span class="m"&gt;-1.2426&lt;/span&gt;  &lt;span class="m"&gt;0.2819&lt;/span&gt;   &lt;span class="m"&gt;-41.2774&lt;/span&gt;   &lt;span class="m"&gt;15.7526&lt;/span&gt;    
&lt;span class="n"&gt;all_cardio_p&lt;/span&gt;                         &lt;span class="m"&gt;-12.5110&lt;/span&gt;  &lt;span class="m"&gt;25.5305&lt;/span&gt;  &lt;span class="m"&gt;-0.4900&lt;/span&gt;  &lt;span class="m"&gt;0.6498&lt;/span&gt;   &lt;span class="m"&gt;-83.3950&lt;/span&gt;   &lt;span class="m"&gt;58.3729&lt;/span&gt;    
&lt;span class="n"&gt;diabetes_p&lt;/span&gt;                            &lt;span class="m"&gt;29.8351&lt;/span&gt;  &lt;span class="m"&gt;25.7688&lt;/span&gt;   &lt;span class="m"&gt;1.1578&lt;/span&gt;  &lt;span class="m"&gt;0.3114&lt;/span&gt;   &lt;span class="m"&gt;-41.7105&lt;/span&gt;  &lt;span class="m"&gt;101.3807&lt;/span&gt;    
&lt;span class="n"&gt;copd_p&lt;/span&gt;                                 &lt;span class="m"&gt;7.8958&lt;/span&gt;  &lt;span class="m"&gt;38.3726&lt;/span&gt;   &lt;span class="m"&gt;0.2058&lt;/span&gt;  &lt;span class="m"&gt;0.8470&lt;/span&gt;   &lt;span class="m"&gt;-98.6438&lt;/span&gt;  &lt;span class="m"&gt;114.4353&lt;/span&gt;    
&lt;span class="n"&gt;ckd_p&lt;/span&gt;                                 &lt;span class="m"&gt;77.4441&lt;/span&gt;  &lt;span class="m"&gt;78.1549&lt;/span&gt;   &lt;span class="m"&gt;0.9909&lt;/span&gt;  &lt;span class="m"&gt;0.3778&lt;/span&gt;  &lt;span class="m"&gt;-139.5486&lt;/span&gt;  &lt;span class="m"&gt;294.4367&lt;/span&gt;    
&lt;span class="n"&gt;cancer_p&lt;/span&gt;                              &lt;span class="m"&gt;-5.5262&lt;/span&gt;  &lt;span class="m"&gt;20.2780&lt;/span&gt;  &lt;span class="m"&gt;-0.2725&lt;/span&gt;  &lt;span class="m"&gt;0.7987&lt;/span&gt;   &lt;span class="m"&gt;-61.8269&lt;/span&gt;   &lt;span class="m"&gt;50.7746&lt;/span&gt;    

&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="n"&gt;Signif.&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; ‘&lt;span class="o"&gt;***&lt;/span&gt;’ &lt;span class="m"&gt;0.001&lt;/span&gt; ‘&lt;span class="o"&gt;**&lt;/span&gt;’ &lt;span class="m"&gt;0.01&lt;/span&gt; ‘&lt;span class="o"&gt;*&lt;/span&gt;’ &lt;span class="m"&gt;0.05&lt;/span&gt; ‘&lt;span class="n"&gt;.&lt;/span&gt;’ &lt;span class="m"&gt;0.1&lt;/span&gt; ‘ ’ &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;estimate&lt;/code&gt; column is the magnitude of the effect of the variable upon the dependent variable (&lt;span class="caps"&gt;AKI&lt;/span&gt; incidence among &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 patients). The bigger this number, the higher is the influence. &lt;strong&gt;Positive&lt;/strong&gt; numbers mean &lt;strong&gt;higher risk&lt;/strong&gt;. &lt;strong&gt;Negative&lt;/strong&gt; numbers mean &lt;strong&gt;less risk&lt;/strong&gt;. However, we must check the &lt;code&gt;tval&lt;/code&gt; and its corresponding &lt;code&gt;pval&lt;/code&gt; (p-value) columns. The &lt;code&gt;tval&lt;/code&gt; test assumes a null hypothesis that &lt;code&gt;estimate&lt;/code&gt; = 0. Therefore if &lt;code&gt;pval&lt;/code&gt; is &lt;strong&gt;less than&lt;/strong&gt; a pre-specified level of confidence (say, 5%), we can assume the &lt;code&gt;estimate&lt;/code&gt; is significantly different than zero. Thus, we would assume that the variable would have influence over the&amp;nbsp;outcome.&lt;/p&gt;
&lt;p&gt;However, as you can see in the output, no variables were associated with &lt;span class="caps"&gt;AKI&lt;/span&gt; incidence with statistical&amp;nbsp;significance.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With this I conclude this demonstration. To summarize&amp;nbsp;I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demonstrated how to import data into a R&amp;nbsp;session;&lt;/li&gt;
&lt;li&gt;Introduced the &lt;code&gt;meta&lt;/code&gt; package, a widely-used R package to meta-analysis&amp;nbsp;calculation;&lt;/li&gt;
&lt;li&gt;Demonstrated the rationale, execution and interpretation of&amp;nbsp;meta-regression.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check my published paper to see the results from a complete analysis of the systematically-reviwed data &lt;a href="https://www.bmj.com/content/369/bmj.m1985"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Subscribe to my &lt;a href="https://antoniocampos13.github.io/feeds/all.rss.xml"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;, &lt;a href="https://antoniocampos13.github.io/feeds/all.atom.xml"&gt;Atom feed&lt;/a&gt; or &lt;a href="https://t.me/joinchat/AAAAAEYrNCLK80Fh1w8nAg"&gt;Telegram channel&lt;/a&gt; to keep you updated whenever I post new&amp;nbsp;content.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.bmj.com/content/369/bmj.m1985"&gt;Features of 20 133 &lt;span class="caps"&gt;UK&lt;/span&gt; patients in hospital with covid-19 using the &lt;span class="caps"&gt;ISARIC&lt;/span&gt; &lt;span class="caps"&gt;WHO&lt;/span&gt; Clinical Characterisation Protocol: prospective observational cohort&amp;nbsp;study&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2763184"&gt;Acute Respiratory Distress Syndrome and Death in Patients With &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 in Wuhan,&amp;nbsp;China&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://linkinghub.elsevier.com/retrieve/pii/S0140673620311892"&gt;Epidemiology, clinical course, and outcomes of critically ill adults with &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 in New York City: a prospective cohort&amp;nbsp;study&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://linkinghub.elsevier.com/retrieve/pii/S0163445320301705"&gt;Clinical characteristics of coronavirus disease 2019 (&lt;span class="caps"&gt;COVID&lt;/span&gt;-19) in China: A systematic review and&amp;nbsp;meta-analysis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jcp.bmj.com/content/early/2020/10/06/jclinpath-2020-207023.long"&gt;High burden of acute kidney injury in &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 pandemic: systematic review and&amp;nbsp;meta-analysis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.791"&gt;On tests of the overall treatment effect in meta‐analysis with normally distributed&amp;nbsp;responses&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.1009"&gt;A refined method for the meta‐analysis of controlled clinical trials with binary&amp;nbsp;outcome&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jennybc/here_here"&gt;Ode to the here&amp;nbsp;package&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/meta/versions/4.9-6/topics/metaprop"&gt;metaprop function | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.rdocumentation.org/packages/meta/versions/4.9-6"&gt;meta package | R&amp;nbsp;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/png.html"&gt;R: &lt;span class="caps"&gt;BMP&lt;/span&gt;, &lt;span class="caps"&gt;JPEG&lt;/span&gt;, &lt;span class="caps"&gt;PNG&lt;/span&gt; and &lt;span class="caps"&gt;TIFF&lt;/span&gt; graphics&amp;nbsp;devices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="R"></category><category term="meta-analysis"></category><category term="statistical analysis"></category><category term="COVID-19"></category><category term="SARS-CoV-2"></category><category term="acute kidney injury"></category></entry></feed>